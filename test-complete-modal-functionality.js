// Script completo para probar toda la funcionalidad del AddServerModal

// Funci√≥n principal de prueba completa
async function testCompleteModalFunctionality() {
  console.log('üîç === PRUEBA COMPLETA DE FUNCIONALIDAD DEL MODAL ===');
  console.log('');
  
  // Paso 1: Verificar autenticaci√≥n
  console.log('üìã Paso 1: Verificando autenticaci√≥n...');
  const session = await checkAuthentication();
  if (!session) {
    console.error('‚ùå No se puede continuar sin autenticaci√≥n');
    return false;
  }
  console.log('‚úÖ Autenticaci√≥n verificada');
  console.log('');
  
  // Paso 2: Verificar permisos del usuario
  console.log('üìã Paso 2: Verificando permisos del usuario...');
  const profile = await checkUserPermissions();
  if (!profile) {
    console.error('‚ùå No se puede continuar sin perfil v√°lido');
    return false;
  }
  console.log('‚úÖ Permisos verificados');
  console.log('');
  
  // Paso 3: Verificar disponibilidad del juego Minecraft
  console.log('üìã Paso 3: Verificando disponibilidad del juego Minecraft...');
  const minecraftGame = await getGameByName('Minecraft');
  if (!minecraftGame.success) {
    console.error('‚ùå No se pudo obtener el juego de Minecraft:', minecraftGame.error);
    return false;
  }
  console.log('‚úÖ Juego Minecraft disponible:', minecraftGame.data.name);
  console.log('');
  
  // Paso 4: Probar endpoint directamente
  console.log('üìã Paso 4: Probando endpoint /api/servers directamente...');
  const endpointTest = await testServerCreationEndpoint();
  console.log('');
  
  // Paso 5: Probar apertura del modal
  console.log('üìã Paso 5: Probando apertura del modal...');
  const modalTest = await testModalOpening();
  if (!modalTest) {
    console.error('‚ùå No se pudo abrir el modal');
    return false;
  }
  console.log('‚úÖ Modal se abre correctamente');
  console.log('');
  
  // Paso 6: Probar llenado del formulario
  console.log('üìã Paso 6: Probando llenado del formulario...');
  const formTest = await testFormFilling();
  if (!formTest) {
    console.error('‚ùå No se pudo llenar el formulario');
    return false;
  }
  console.log('‚úÖ Formulario se llena correctamente');
  console.log('');
  
  // Paso 7: Probar env√≠o del formulario
  console.log('üìã Paso 7: Probando env√≠o del formulario...');
  const submitTest = await testFormSubmission();
  console.log('');
  
  console.log('üèÅ === PRUEBA COMPLETA FINALIZADA ===');
  return true;
}

// Funci√≥n para verificar autenticaci√≥n
async function checkAuthentication() {
  try {
    const { data: { session }, error } = await window.supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error al obtener sesi√≥n:', error);
      return null;
    }
    
    if (!session) {
      console.log('‚ùå No hay sesi√≥n activa');
      return null;
    }
    
    console.log('‚úÖ Sesi√≥n activa:');
    console.log('- User ID:', session.user.id);
    console.log('- Email:', session.user.email);
    
    return session;
  } catch (error) {
    console.error('‚ùå Error inesperado:', error);
    return null;
  }
}

// Funci√≥n para verificar permisos del usuario
async function checkUserPermissions() {
  const session = await checkAuthentication();
  if (!session) return null;
  
  try {
    const { data: profile, error } = await window.supabase
      .from('profiles')
      .select('*')
      .eq('id', session.user.id)
      .single();
    
    if (error) {
      console.error('‚ùå Error al obtener perfil:', error);
      return null;
    }
    
    if (!profile) {
      console.log('‚ùå No se encontr√≥ perfil para el usuario');
      return null;
    }
    
    console.log('‚úÖ Perfil encontrado:');
    console.log('- Username:', profile.username);
    console.log('- Email:', profile.email);
    
    return profile;
  } catch (error) {
    console.error('‚ùå Error inesperado al verificar permisos:', error);
    return null;
  }
}

// Funci√≥n para probar el endpoint directamente
async function testServerCreationEndpoint() {
  const session = await checkAuthentication();
  if (!session) return false;
  
  const minecraftGame = await window.getGameByName('Minecraft');
  if (!minecraftGame.success) return false;
  
  const testServerData = {
    game_id: minecraftGame.data.id,
    name: `Test Complete ${Date.now()}`,
    description: 'Servidor de prueba completa',
    server_ip: '127.0.0.1',
    server_port: 25565,
    server_version: '1.20.1',
    max_players: 20,
    server_type: 'survival',
    is_active: true,
    is_featured: false,
    owner_id: session.user.id
  };
  
  try {
    const response = await fetch('/api/servers', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      },
      body: JSON.stringify(testServerData)
    });
    
    console.log('üì° Respuesta del endpoint:');
    console.log('- Status:', response.status);
    console.log('- Status Text:', response.statusText);
    
    const responseText = await response.text();
    console.log('- Response Body:', responseText);
    
    if (response.ok) {
      console.log('‚úÖ Endpoint funciona correctamente');
      return true;
    } else {
      console.log('‚ùå Error en endpoint');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error en petici√≥n al endpoint:', error);
    return false;
  }
}

// Funci√≥n para probar apertura del modal
async function testModalOpening() {
  console.log('üéØ Intentando abrir modal...');
  
  // M√©todo 1: Buscar bot√≥n por ID
  const addServerBtn = document.getElementById('addServerBtn');
  if (addServerBtn) {
    console.log('‚úÖ Bot√≥n encontrado por ID');
    addServerBtn.click();
  } else {
    // M√©todo 2: Disparar evento directamente
    console.log('üéØ Disparando evento openAddServerModal');
    window.dispatchEvent(new CustomEvent('openAddServerModal'));
  }
  
  // Esperar y verificar si el modal se abri√≥
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const modal = document.querySelector('[data-react-modal="add-server"]') ||
               document.querySelector('.ReactModal__Content') ||
               document.querySelector('[role="dialog"]');
  
  if (modal) {
    const isVisible = modal.offsetParent !== null && 
                     window.getComputedStyle(modal).display !== 'none';
    
    if (isVisible) {
      console.log('‚úÖ Modal abierto y visible');
      return modal;
    } else {
      console.log('‚ùå Modal encontrado pero no visible');
      return null;
    }
  } else {
    console.log('‚ùå Modal no encontrado');
    return null;
  }
}

// Funci√≥n para probar llenado del formulario
async function testFormFilling() {
  const modal = await testModalOpening();
  if (!modal) return false;
  
  const formData = {
    name: `Test Form ${Date.now()}`,
    description: 'Servidor de prueba de formulario',
    ip: '127.0.0.1',
    port: '25565',
    version: '1.20.1',
    maxPlayers: '20'
  };
  
  console.log('üìù Llenando campos del formulario...');
  
  let fieldsFound = 0;
  let fieldsFilled = 0;
  
  Object.entries(formData).forEach(([fieldName, value]) => {
    const input = modal.querySelector(`input[name="${fieldName}"]`) ||
                 modal.querySelector(`#${fieldName}`) ||
                 modal.querySelector(`[placeholder*="${fieldName}"]`);
    
    fieldsFound++;
    
    if (input) {
      input.value = value;
      input.dispatchEvent(new Event('input', { bubbles: true }));
      input.dispatchEvent(new Event('change', { bubbles: true }));
      console.log(`‚úÖ Campo ${fieldName} llenado`);
      fieldsFilled++;
    } else {
      console.log(`‚ùå Campo ${fieldName} no encontrado`);
    }
  });
  
  console.log(`üìä Campos llenados: ${fieldsFilled}/${fieldsFound}`);
  return fieldsFilled > 0;
}

// Funci√≥n para probar env√≠o del formulario
async function testFormSubmission() {
  const modal = await testModalOpening();
  if (!modal) return false;
  
  await testFormFilling();
  
  console.log('üöÄ Buscando bot√≥n de env√≠o...');
  
  const submitBtn = modal.querySelector('button[type="submit"]') ||
                   modal.querySelector('button:contains("Crear")') ||
                   modal.querySelector('button:contains("Agregar")') ||
                   modal.querySelector('.btn-primary');
  
  if (submitBtn) {
    console.log('‚úÖ Bot√≥n de env√≠o encontrado');
    
    // Interceptar la petici√≥n
    const originalFetch = window.fetch;
    let requestIntercepted = false;
    
    window.fetch = function(...args) {
      if (args[0].includes('/api/servers')) {
        console.log('üåê Petici√≥n interceptada:', args[0]);
        requestIntercepted = true;
      }
      return originalFetch.apply(this, args);
    };
    
    // Hacer clic en el bot√≥n
    submitBtn.click();
    
    // Esperar un momento para ver si se intercept√≥ la petici√≥n
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Restaurar fetch original
    window.fetch = originalFetch;
    
    if (requestIntercepted) {
      console.log('‚úÖ Formulario enviado correctamente');
      return true;
    } else {
      console.log('‚ùå No se detect√≥ env√≠o del formulario');
      return false;
    }
  } else {
    console.log('‚ùå Bot√≥n de env√≠o no encontrado');
    console.log('üîç Botones disponibles:', modal.querySelectorAll('button'));
    return false;
  }
}

// Hacer funciones disponibles globalmente
window.completeModalTest = {
  testCompleteModalFunctionality,
  checkAuthentication,
  checkUserPermissions,
  testServerCreationEndpoint,
  testModalOpening,
  testFormFilling,
  testFormSubmission
};

console.log('üõ†Ô∏è Script de prueba completa del modal cargado');
console.log('Ejecuta: completeModalTest.testCompleteModalFunctionality() para comenzar la prueba completa');