---
import Layout from '../layouts/Layout.astro';
import LoginForm from '../components/react/LoginForm.tsx';
---

<Layout title="Iniciar Sesi√≥n - Gaming Hub">

  
  <!-- Background with animated elements -->
  <div class="min-h-screen bg-gradient-to-br from-calico-stripe-dark via-calico-orange-900 to-calico-stripe-dark relative overflow-hidden pt-16">
    <!-- Animated background elements -->
    <div class="absolute inset-0">
      <div class="absolute top-20 left-10 w-72 h-72 bg-calico-orange-500/20 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute bottom-20 right-10 w-96 h-96 bg-calico-orange-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-calico-stripe-light/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
    </div>

    <!-- Floating particles and cat elements -->
    <div class="absolute inset-0 overflow-hidden">
      <!-- Cat paw prints -->
      <div class="absolute top-1/4 left-1/4 w-8 h-8 text-calico-orange-400/30 animate-pulse delay-300">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Cat paw print SVG -->
          <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-3/4 left-3/4 w-7 h-7 text-calico-orange-400/30 animate-bounce delay-700">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Cat paw print SVG -->
          <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-1/2 right-1/4 w-6 h-6 text-calico-orange-300/25 animate-pulse delay-1000">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
        </svg>
      </div>
      
      <!-- Additional decorative elements -->
      <div class="absolute top-16 right-16 w-8 h-8 text-calico-white/15 animate-bounce delay-500">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M21,6H18V4A2,2 0 0,0 16,2H8A2,2 0 0,0 6,4V6H3A1,1 0 0,0 2,7V8A3,3 0 0,0 5,11H6.83L7.83,15.72C7.96,16.32 8.5,16.76 9.11,16.76H14.89C15.5,16.76 16.04,16.32 16.17,15.72L17.17,11H19A3,3 0 0,0 22,8V7A1,1 0 0,0 21,6M8,4H16V6H8V4M6.2,8H17.8L17,11H7L6.2,8Z"/>
        </svg>
      </div>
      <div class="absolute bottom-16 left-16 w-9 h-9 text-calico-orange-200/20 animate-pulse delay-1200">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Cat paw print SVG -->
          <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
        </svg>
      </div>
    </div>

    <!-- Main content -->
    <div class="relative z-10 flex items-center justify-center min-h-screen px-4 py-8">
      <div class="w-full max-w-md">
        <!-- TTina mascot image with Easter Egg -->
        <div class="text-center mb-8 relative">
          <img 
            id="ttina-login-easter-egg"
            src="/TTina.png" 
            alt="TTina - Mascota de TiChat" 
            class="w-32 h-32 mx-auto rounded-full shadow-2xl border-4 border-calico-orange-300 hover:scale-105 transition-transform duration-300 cursor-pointer select-none"
            title="¬°Haz clic en TTina! üê±"
          />
          <p id="ttina-login-message" class="text-calico-gray-700 text-sm mt-2 font-medium transition-all duration-500">¬°Hola! Soy TTina üê±</p>
          
          <!-- Contador secreto de clics -->
          <div id="ttina-login-counter" class="absolute -top-1 -right-1 bg-calico-orange-500 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center opacity-0 transition-opacity duration-300">
            0
          </div>
          
          <!-- Contenedor para efectos visuales -->
          <div id="ttina-login-effects" class="absolute inset-0 pointer-events-none"></div>
        </div>
        
        <!-- Login form container -->
        <div class="bg-white/95 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-calico-gray-200">
          <LoginForm client:load />
        </div>
      </div>
    </div>
  </div>

<script>
  // üê± TTina Login Easter Egg Implementation
  document.addEventListener('DOMContentLoaded', () => {
    let ttinaLoginClickCount = 0;
    const ttinaLoginMessages = [
      "¬°Miau! Bienvenido üê±",
      "¬°TTina te ayuda a entrar! üò∏",
      "¬°Ronroneo de bienvenida! üòª",
      "¬°M√°s caricias! üêæ",
      "¬°Soy tu guardiana! üíñ",
      "¬°Miau miau! üéµ",
      "¬°Protegiendo tu login! üõ°Ô∏è",
      "¬°TTina te cuida! ‚ù§Ô∏è",
      "¬°Purr purr! üòΩ",
      "¬°Acceso autorizado! ‚ú®"
    ];

    function createHeartEffect(x: number, y: number) {
      const heart = document.createElement('div');
      heart.innerHTML = 'üíñ';
      heart.style.cssText = `
        position: fixed;
        left: ${x}px;
        top: ${y}px;
        font-size: 16px;
        pointer-events: none;
        z-index: 1000;
        animation: heartFloat 2s ease-out forwards;
      `;
      
      document.body.appendChild(heart);
      setTimeout(() => heart.remove(), 2000);
    }

    function createPawEffect(container: HTMLElement) {
      const paw = document.createElement('div');
      paw.innerHTML = 'üêæ';
      paw.style.cssText = `
        position: absolute;
        font-size: 20px;
        animation: pawSpin 1s ease-out forwards;
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
      `;
      
      container.appendChild(paw);
      setTimeout(() => paw.remove(), 1000);
    }

    function playMeowSound() {
      try {
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(350, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(180, audioContext.currentTime + 0.25);
        
        gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.25);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.25);
      } catch (error) {
        console.log('üîá Audio no disponible');
      }
    }

    const ttinaImg = document.getElementById('ttina-login-easter-egg');
    const ttinaMessage = document.getElementById('ttina-login-message');
    const ttinaCounter = document.getElementById('ttina-login-counter');
    const ttinaEffects = document.getElementById('ttina-login-effects');

    if (ttinaImg && ttinaMessage && ttinaCounter && ttinaEffects) {
      ttinaImg.addEventListener('click', (e) => {
        ttinaLoginClickCount++;
        
        // Actualizar contador
        ttinaCounter.textContent = ttinaLoginClickCount.toString();
        if (ttinaLoginClickCount >= 3) {
          ttinaCounter.style.opacity = '1';
        }
        
        // Cambiar mensaje
        const randomMessage = ttinaLoginMessages[Math.floor(Math.random() * ttinaLoginMessages.length)];
        ttinaMessage.textContent = randomMessage;
        
        // Efectos visuales
        const rect = ttinaImg.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        createHeartEffect(centerX + (Math.random() - 0.5) * 80, centerY + (Math.random() - 0.5) * 80);
        createPawEffect(ttinaEffects);
        
        // Animaciones especiales
        ttinaImg.style.animation = 'none';
        setTimeout(() => {
          if (ttinaLoginClickCount % 7 === 0) {
            ttinaImg.style.animation = 'spin 1s ease-in-out, bounce 0.5s ease-in-out';
          } else if (ttinaLoginClickCount % 4 === 0) {
            ttinaImg.style.animation = 'wiggle 0.5s ease-in-out';
          } else {
            ttinaImg.style.animation = 'bounce 0.5s ease-in-out';
          }
        }, 10);
        
        // Sonido de maullido
        playMeowSound();
        
        // Easter egg especial cada 15 clics
        if (ttinaLoginClickCount % 15 === 0) {
          ttinaMessage.textContent = `¬°GUARDIANA SUPREMA! ${ttinaLoginClickCount} clics de protecci√≥n! üåü`;
          ttinaMessage.style.color = '#f97316';
          ttinaImg.style.filter = 'hue-rotate(120deg) brightness(1.2)';
          
          // Lluvia de corazones
          for (let i = 0; i < 3; i++) {
            setTimeout(() => {
              createHeartEffect(
                centerX + (Math.random() - 0.5) * 150,
                centerY + (Math.random() - 0.5) * 150
              );
            }, i * 300);
          }
          
          setTimeout(() => {
            ttinaImg.style.filter = 'none';
            ttinaMessage.style.color = '';
          }, 3000);
        }
        
        // Resetear animaci√≥n
        setTimeout(() => {
          ttinaImg.style.animation = '';
        }, 1000);
      });
    }
  });
</script>

<!-- Estilos CSS para las animaciones del Easter Egg -->
<style>
  @keyframes heartFloat {
    0% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
    100% {
      transform: translateY(-80px) scale(0.5);
      opacity: 0;
    }
  }
  
  @keyframes pawSpin {
    0% {
      transform: rotate(0deg) scale(1);
      opacity: 1;
    }
    100% {
      transform: rotate(360deg) scale(0);
      opacity: 0;
    }
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0,-20px,0);
    }
    70% {
      transform: translate3d(0,-10px,0);
    }
    90% {
      transform: translate3d(0,-3px,0);
    }
  }
  
  @keyframes wiggle {
    0%, 7% {
      transform: rotateZ(0);
    }
    15% {
      transform: rotateZ(-10deg);
    }
    20% {
      transform: rotateZ(8deg);
    }
    25% {
      transform: rotateZ(-6deg);
    }
    30% {
      transform: rotateZ(4deg);
    }
    35% {
      transform: rotateZ(-2deg);
    }
    40%, 100% {
      transform: rotateZ(0);
    }
  }
</style>


</Layout>