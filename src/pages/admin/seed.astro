---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Admin - Seeders">
  <main class="min-h-screen bg-gradient-to-br from-calico-gray-900 via-calico-orange-900 to-calico-gray-900">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-2xl mx-auto">
        <h1 class="text-4xl font-bold text-calico-white mb-8 text-center">
          üå± Database Seeders
        </h1>
        
        <div class="bg-calico-white/10 backdrop-blur-md rounded-xl p-8 border border-calico-stripe-light/30">
          <div class="mb-6">
            <h2 class="text-2xl font-semibold text-calico-white mb-4">Poblar Base de Datos</h2>
            <p class="text-calico-gray-300 mb-4">
              Este proceso crear√° datos iniciales en la base de datos incluyendo:
            </p>
            <ul class="text-calico-gray-300 space-y-2 mb-6">
              <li>‚Ä¢ üéÆ Juegos (Minecraft, Among Us, Call of Duty, etc.)</li>
              <li>‚Ä¢ üñ•Ô∏è Servidores de Minecraft</li>
              <li>‚Ä¢ üë• Usuarios de demostraci√≥n</li>
              <li>‚Ä¢ üìù Posts de ejemplo</li>
            </ul>
            <div class="bg-calico-orange-500/20 border border-calico-orange-500/50 rounded-lg p-4 mb-6">
              <p class="text-calico-orange-200 text-sm">
                ‚ö†Ô∏è <strong>Advertencia:</strong> Solo ejecutar si la base de datos est√° vac√≠a. 
                Los seeders verificar√°n si ya existen datos antes de insertar.
              </p>
            </div>
          </div>
          
          <div class="space-y-4">
            <div>
              <label for="authorization" class="block text-calico-white font-medium mb-2">
                Clave de Autorizaci√≥n:
              </label>
              <input 
                type="password" 
                id="authorization" 
                placeholder="Ingresa la clave de autorizaci√≥n"
                class="w-full bg-calico-white/5 border border-calico-stripe-light/30 rounded-lg p-3 text-calico-white placeholder-calico-gray-400 focus:outline-none focus:ring-2 focus:ring-calico-orange-500 focus:border-transparent"
              >
            </div>
            
            <button 
              id="runSeeders"
              class="w-full bg-calico-orange-600 hover:bg-calico-orange-700 text-calico-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üå± Ejecutar Seeders
            </button>
          </div>
          
          <div id="result" class="mt-6 hidden">
            <div id="loading" class="hidden text-center py-4">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-calico-white"></div>
              <p class="text-calico-white mt-2">Ejecutando seeders...</p>
            </div>
            
            <div id="success" class="hidden bg-calico-green-500/20 border border-calico-green-500/50 rounded-lg p-4">
              <p class="text-calico-green-200">
                ‚úÖ <strong>√âxito:</strong> Seeders ejecutados correctamente.
              </p>
            </div>
            
            <div id="error" class="hidden bg-calico-red-500/20 border border-calico-red-500/50 rounded-lg p-4">
              <p class="text-calico-red-200">
                ‚ùå <strong>Error:</strong> <span id="errorMessage"></span>
              </p>
            </div>
          </div>
        </div>
        
        <div class="text-center mt-8">
          <a 
            href="/"
            class="text-calico-orange-300 hover:text-calico-white transition-colors"
          >
            ‚Üê Volver al inicio
          </a>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const runButton = document.getElementById('runSeeders') as HTMLButtonElement;
    const authInput = document.getElementById('authorization') as HTMLInputElement;
    const resultDiv = document.getElementById('result');
    const loadingDiv = document.getElementById('loading');
    const successDiv = document.getElementById('success');
    const errorDiv = document.getElementById('error');
    const errorMessage = document.getElementById('errorMessage');
    
    runButton?.addEventListener('click', async () => {
      const authorization = authInput?.value;
      
      if (!authorization) {
        alert('Por favor ingresa la clave de autorizaci√≥n');
        return;
      }
      
      // Mostrar loading
      resultDiv?.classList.remove('hidden');
      loadingDiv?.classList.remove('hidden');
      successDiv?.classList.add('hidden');
      errorDiv?.classList.add('hidden');
      if (runButton) runButton.disabled = true;
      
      try {
        const response = await fetch('/api/seed', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ authorization })
        });
        
        const data = await response.json();
        
        loadingDiv?.classList.add('hidden');
        
        if (data.success) {
          successDiv?.classList.remove('hidden');
        } else {
          errorDiv?.classList.remove('hidden');
          if (errorMessage) {
            errorMessage.textContent = data.error || 'Error desconocido';
          }
        }
      } catch (error) {
        loadingDiv?.classList.add('hidden');
        errorDiv?.classList.remove('hidden');
        if (errorMessage) {
          errorMessage.textContent = 'Error de conexi√≥n';
        }
      } finally {
        if (runButton) runButton.disabled = false;
      }
    });
  });
</script>