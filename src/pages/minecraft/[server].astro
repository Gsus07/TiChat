---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import PostForm from '../../components/react/PostForm.tsx';
import { getServerBySlugWithTheme, getGameByName, type GameServerWithJoins } from '../../utils/games';
import { getPostsByServerId } from '../../utils/posts';
import { getCurrentUser } from '../../utils/auth';

// Función requerida para rutas dinámicas
export async function getStaticPaths() {
  // Retornamos rutas vacías ya que los servidores se generan dinámicamente
  return [];
}

// Configurar para renderizado en el cliente
export const prerender = false;

// Obtener parámetro del servidor desde la URL
const { server } = Astro.params as { server?: string };

// Obtener usuario actual
const currentUser = await getCurrentUser(Astro.request);
const currentUserId = currentUser?.id;

// Inicializar variables
let serverData: any = null;
let posts: any[] = [];
let dbServer: GameServerWithJoins;

// Verificar que tenemos un ID de servidor válido
if (!server) {
  return Astro.redirect('/minecraft');
}

// Obtener datos del servidor desde Supabase usando slug
try {
  // Primero obtener el ID del juego Minecraft
  const gameResult = await getGameByName('Minecraft');
  if (!gameResult.data) {
    return Astro.redirect('/minecraft');
  }
  
  const gameId = gameResult.data.id;
  
  // Obtener servidor por slug
  const serverResult = await getServerBySlugWithTheme(server, gameId);
  
  if (!serverResult.data) {
    // Si no se encuentra el servidor, redirigir a la página principal de Minecraft
    return Astro.redirect('/minecraft');
  }
  
  dbServer = serverResult.data;
  
  // Verificar que el servidor pertenece al juego de Minecraft
  if (dbServer.games?.name !== 'Minecraft') {
    return Astro.redirect('/minecraft');
  }
  
  serverData = {
    name: dbServer.name,
    description: dbServer.description || 'Servidor de Minecraft',
    ip: dbServer.server_ip || 'No disponible',
    port: dbServer.server_port?.toString() || 'No disponible',
    version: dbServer.server_version || 'No especificada',
    players: `${dbServer.server_stats?.[0]?.online_players || 0}/${dbServer.max_players || 0}`,
    status: dbServer.is_active ? 'En línea' : 'Fuera de línea',
    image: dbServer.image || '/minecraft.svg',
    id: dbServer.id,
    game_id: dbServer.game_id,
    server_type: dbServer.server_type || 'survival'
  };
  
  // Obtener posts del servidor
  const postsResult = await getPostsByServerId(dbServer.id, currentUserId);
  if (postsResult.data) {
    posts = postsResult.data;
  }
  
} catch (error) {
  console.error('Error loading server data:', error);
  return Astro.redirect('/minecraft');
}
---

<Layout title={`${serverData.name} - Minecraft Server`}>
  <main class="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
    <!-- Elementos animados de fondo -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute top-20 left-10 w-32 h-32 bg-green-500/10 rounded-full blur-xl animate-pulse"></div>
      <div class="absolute top-40 right-20 w-24 h-24 bg-emerald-500/10 rounded-full blur-xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-20 left-1/4 w-40 h-40 bg-green-400/5 rounded-full blur-xl animate-pulse delay-2000"></div>
      <div class="absolute bottom-40 right-1/3 w-28 h-28 bg-emerald-400/5 rounded-full blur-xl animate-pulse delay-3000"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 py-8">
      <!-- Header del servidor -->
      <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-8 border border-white/10 mb-8">
        <div class="flex flex-col lg:flex-row items-start lg:items-center gap-6">
          <div class="relative">
            <div class="absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-400 rounded-2xl blur opacity-75"></div>
            <img src={serverData.image} alt={serverData.name} class="relative w-24 h-24 rounded-2xl object-cover border-2 border-white/20">
          </div>
          
          <div class="flex-1">
            <h1 class="text-4xl font-bold text-white mb-2">{serverData.name}</h1>
            <p class="text-gray-300 text-lg mb-4">{serverData.description}</p>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Jugadores</div>
                <div class="text-xl font-bold text-green-400">{serverData.players}</div>
              </div>
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Estado</div>
                <div class="text-xl font-bold text-green-400">{serverData.status}</div>
              </div>
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Versión</div>
                <div class="text-xl font-bold text-white">{serverData.version}</div>
              </div>
            </div>
          </div>
          
          <div class="bg-white/5 rounded-lg p-4 border border-white/10">
            <div class="text-sm text-gray-400 mb-2">Dirección del servidor</div>
            <div class="text-green-400 font-mono text-lg">{serverData.ip}:{serverData.port}</div>
            <button class="mt-3 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors w-full">
              Copiar IP
            </button>
          </div>
        </div>
      </div>

      <!-- Formulario para nueva publicación -->
      <PostForm 
        client:load
        serverId={serverData.id}
        gameId={serverData.game_id}
        serverName={serverData.name}
        placeholder={`¿Qué está pasando en ${serverData.name}?`}
      />

      <!-- Muro de publicaciones -->
      <div class="space-y-6">
        <h2 class="text-2xl font-bold text-white mb-6">Muro del Servidor</h2>
        
        {posts.length > 0 ? (
          <!-- Publicaciones del servidor -->
          {posts.map((post) => (
            <PostCard 
              post={post}
              currentUserId={currentUserId}
            />
          ))}
        ) : (
          <!-- Mensaje cuando no hay posts -->
          <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-8 border border-white/10 text-center">
            <p class="text-gray-300 text-lg">No hay publicaciones en {serverData.name} aún.</p>
            <p class="text-gray-400 mt-2">¡Sé el primero en compartir algo!</p>
          </div>
        )}
      </div>
    </div>
  </main>

  <script>
    // Función para cargar datos del servidor
    function initializeServerPage() {
      // Funcionalidad básica de la página del servidor
      setTimeout(() => {
        
        // Funcionalidad para copiar IP del servidor
        const copyButtons = document.querySelectorAll('button');
        copyButtons.forEach(button => {
          if (button.textContent && button.textContent.includes('Copiar IP')) {
            button.addEventListener('click', function() {
              const serverIPElement = this.parentElement?.querySelector('.font-mono');
              const serverIP = serverIPElement?.textContent || '';
              navigator.clipboard.writeText(serverIP).then(function() {
                // Cambiar texto del boton temporalmente
                const originalText = button.textContent;
                button.textContent = 'Copiado!';
                button.classList.add('bg-green-700');
                
                setTimeout(function() {
                  button.textContent = originalText;
                  button.classList.remove('bg-green-700');
                }, 2000);
              });
            });
          }
        });
      }, 100);
    }
    
    // Cargar datos cuando el DOM esté listo
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeServerPage);
    } else {
      initializeServerPage();
    }
    
    // También cargar en transiciones de Astro
    document.addEventListener('astro:page-load', initializeServerPage);
  </script>
</Layout>