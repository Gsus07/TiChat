---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import PostForm from '../../components/react/PostForm.tsx';

// Función requerida para rutas dinámicas
export async function getStaticPaths() {
  // Retornamos rutas vacías ya que los servidores se crean dinámicamente
  // Las páginas se generarán en el cliente
  return [];
}

// Configurar para renderizado en el cliente
export const prerender = false;

// Esta página maneja servidores dinámicos creados por el usuario
const { server } = Astro.params as { server?: string };

// Datos por defecto para servidores personalizados
const defaultServerData = {
  name: 'Servidor Personalizado',
  description: 'Un servidor creado por la comunidad',
  ip: 'servidor.com',
  port: '25565',
  version: '1.20.1',
  players: `${Math.floor(Math.random() * 20) + 5}/50`,
  status: 'En línea',
  image: '/minecraft-custom.jpg',
  id: ''
};

// Intentar obtener datos del servidor desde el parámetro
let serverData = defaultServerData;

// Si el servidor es personalizado, intentar cargar datos específicos
if (server && typeof server === 'string') {
  if (server.startsWith('custom-')) {
    // En el cliente, los datos se cargarán desde localStorage
    // Aquí usamos datos por defecto que se actualizarán en el cliente
    const serverId = server.replace('custom-', '');
    serverData = {
      ...defaultServerData,
      name: 'Servidor Personalizado',
      description: 'Cargando datos del servidor...',
      id: serverId
    };
  }
}
---

<Layout title={`${serverData.name} - Minecraft Server`}>
  <main class="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
    <!-- Elementos animados de fondo -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute top-20 left-10 w-32 h-32 bg-green-500/10 rounded-full blur-xl animate-pulse"></div>
      <div class="absolute top-40 right-20 w-24 h-24 bg-emerald-500/10 rounded-full blur-xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-20 left-1/4 w-40 h-40 bg-green-400/5 rounded-full blur-xl animate-pulse delay-2000"></div>
      <div class="absolute bottom-40 right-1/3 w-28 h-28 bg-emerald-400/5 rounded-full blur-xl animate-pulse delay-3000"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 py-8">
      <!-- Header del servidor -->
      <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-8 border border-white/10 mb-8">
        <div class="flex flex-col lg:flex-row items-start lg:items-center gap-6">
          <div class="relative">
            <div class="absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-400 rounded-2xl blur opacity-75"></div>
            <img src={serverData.image} alt={serverData.name} class="relative w-24 h-24 rounded-2xl object-cover border-2 border-white/20">
          </div>
          
          <div class="flex-1">
            <h1 class="text-4xl font-bold text-white mb-2">{serverData.name}</h1>
            <p class="text-gray-300 text-lg mb-4">{serverData.description}</p>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Jugadores</div>
                <div class="text-xl font-bold text-green-400">{serverData.players}</div>
              </div>
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Estado</div>
                <div class="text-xl font-bold text-green-400">{serverData.status}</div>
              </div>
              <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                <div class="text-sm text-gray-400 mb-1">Versión</div>
                <div class="text-xl font-bold text-white">{serverData.version}</div>
              </div>
            </div>
          </div>
          
          <div class="bg-white/5 rounded-lg p-4 border border-white/10">
            <div class="text-sm text-gray-400 mb-2">Dirección del servidor</div>
            <div class="text-green-400 font-mono text-lg">{serverData.ip}:{serverData.port}</div>
            <button class="mt-3 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors w-full">
              Copiar IP
            </button>
          </div>
        </div>
      </div>

      <!-- Formulario para nueva publicación -->
      <PostForm 
        client:load
        serverName={server}
        placeholder="¿Qué está pasando en el servidor?"
      />

      <!-- Muro de publicaciones -->
      <div class="space-y-6">
        <h2 class="text-2xl font-bold text-white mb-6">Muro del Servidor</h2>
        
        <!-- Publicaciones de ejemplo para servidores personalizados -->
        <PostCard 
          post={{
            id: "1",
            content: "¡Bienvenidos al servidor! Esperamos que disfruten su experiencia aqui. Recuerden seguir las reglas y divertirse.",
            image_url: "",
            created_at: "2024-01-15T10:00:00Z",
            user_id: "admin",
            is_active: true,
            profiles: {
              username: "Administrador",
              full_name: "Administrador del Servidor",
              avatar_url: "/default-avatar.png"
            },
            like_count: 15,
            comment_count: 3,
            user_has_liked: false
          }}
        />
        
        <PostCard 
          post={{
            id: "2",
            content: "Este servidor esta increible! La comunidad es muy amigable y hay muchas cosas que hacer.",
            image_url: "",
            created_at: "2024-01-15T08:00:00Z",
            user_id: "player1",
            is_active: true,
            profiles: {
              username: "Jugador_Pro",
              full_name: "Jugador Profesional",
              avatar_url: "/default-avatar.png"
            },
            like_count: 8,
            comment_count: 2,
            user_has_liked: false
          }}
        />
        
        <PostCard 
          post={{
            id: "3",
            content: "Termine mi nueva construccion en el servidor. ¡Vengan a verla en las coordenadas X:250 Z:180!",
            image_url: "/minecraft-build.jpg",
            created_at: "2024-01-15T06:00:00Z",
            user_id: "builder1",
            is_active: true,
            profiles: {
              username: "Constructor_Master",
              full_name: "Maestro Constructor",
              avatar_url: "/default-avatar.png"
            },
            like_count: 23,
            comment_count: 7,
            user_has_liked: false
          }}
        />
        
        <PostCard 
          post={{
            id: "4",
            content: "Encontre una cueva super grande llena de diamantes. ¿Alguien quiere venir a explorar conmigo?",
            image_url: "",
            created_at: "2024-01-15T04:00:00Z",
            user_id: "explorer1",
            is_active: true,
            profiles: {
              username: "Explorador_2023",
              full_name: "Explorador Aventurero",
              avatar_url: "/default-avatar.png"
            },
            like_count: 12,
            comment_count: 5,
            user_has_liked: false
          }}
        />
        
        <PostCard 
          post={{
            id: "5",
            content: "Mi granja automatica de trigo ya esta funcionando perfectamente. ¡Comida gratis para todos!",
            image_url: "/minecraft-farm.jpg",
            created_at: "2024-01-14T12:00:00Z",
            user_id: "farmer1",
            is_active: true,
            profiles: {
              username: "Granjero_Feliz",
              full_name: "Granjero Feliz",
              avatar_url: "/default-avatar.png"
            },
            like_count: 18,
            comment_count: 4,
            user_has_liked: false
          }}
        />
      </div>
    </div>
  </main>

  <script>
    // Función para cargar datos del servidor
    function loadServerData() {
      // Pequeño delay para asegurar que el DOM esté listo
      setTimeout(() => {
        const currentPath = window.location.pathname;
        const serverMatch = currentPath.match(/\/minecraft\/(custom-.+)/);
        
        if (serverMatch) {
          const serverSlug = serverMatch[1];
          
          // Buscar el servidor en la lista de servidores personalizados
          const customServers = JSON.parse(localStorage.getItem('minecraft_customServers') || '[]');
          
          const serverData = customServers.find((s: any) => s.link === `/minecraft/${serverSlug}` || s.link.endsWith(`/${serverSlug}`));
          
          if (serverData && serverData.name) {
            // Actualizar título de la página
            document.title = `${serverData.name} - Minecraft Server`;
            
            // Actualizar elementos de la página con datos del servidor
            const nameElement = document.querySelector('h1');
            if (nameElement) nameElement.textContent = serverData.name;
            
            const descElement = document.querySelector('h1 + p');
            if (descElement) descElement.textContent = serverData.description;
            
            const ipElement = document.querySelector('.font-mono');
            if (ipElement) ipElement.textContent = `${serverData.ip}:${serverData.port}`;
            
            // Actualizar jugadores, estado y versión usando selectores más específicos
            const playersElement = document.querySelector('.text-xl.font-bold.text-green-400');
            if (playersElement) playersElement.textContent = serverData.players || '0/50';
            
            const statusElements = document.querySelectorAll('.text-xl.font-bold.text-green-400');
            if (statusElements[1]) statusElements[1].textContent = serverData.status || 'En línea';
            
            const versionElement = document.querySelector('.text-xl.font-bold.text-white');
            if (versionElement) versionElement.textContent = serverData.version || '1.20.1';
            
            const imageElement = document.querySelector('img[alt]') as HTMLImageElement;
            if (imageElement) {
              imageElement.src = serverData.image || '/minecraft-custom.jpg';
              imageElement.alt = serverData.name;
            }
          }
        }
        
        // Funcionalidad para copiar IP del servidor
        const copyButtons = document.querySelectorAll('button');
        copyButtons.forEach(button => {
          if (button.textContent && button.textContent.includes('Copiar IP')) {
            button.addEventListener('click', function() {
              const serverIPElement = this.parentElement?.querySelector('.font-mono');
              const serverIP = serverIPElement?.textContent || '';
              navigator.clipboard.writeText(serverIP).then(function() {
                // Cambiar texto del boton temporalmente
                const originalText = button.textContent;
                button.textContent = 'Copiado!';
                button.classList.add('bg-green-700');
                
                setTimeout(function() {
                  button.textContent = originalText;
                  button.classList.remove('bg-green-700');
                }, 2000);
              });
            });
          }
        });
      }, 100);
    }
    
    // Cargar datos cuando el DOM esté listo
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadServerData);
    } else {
      loadServerData();
    }
    
    // También cargar en transiciones de Astro
    document.addEventListener('astro:page-load', loadServerData);
  </script>
</Layout>