---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import PostForm from '../../components/react/PostForm.tsx';
import PostsList from '../../components/react/PostsList.tsx';
import { getServerBySlugWithTheme, getGameByName, type GameServerWithJoins } from '../../utils/games';
import { getPostsByServerId } from '../../utils/posts';
import { getCurrentUser } from '../../utils/auth';


// Función requerida para rutas dinámicas
export async function getStaticPaths() {
  // Retornamos rutas vacías ya que los servidores se generan dinámicamente
  return [];
}

// Configurar para renderizado en el cliente
export const prerender = false;

// Obtener parámetro del servidor desde la URL
const { server } = Astro.params as { server?: string };

// Obtener usuario actual
const currentUser = await getCurrentUser(Astro.request);
const currentUserId = currentUser?.id;

// Inicializar variables
let serverData: any = null;
let posts: any[] = [];
let dbServer: GameServerWithJoins;

// Verificar que tenemos un ID de servidor válido
if (!server) {
  return Astro.redirect('/minecraft');
}

// Obtener datos del servidor desde Supabase usando slug
try {
  // Primero obtener el ID del juego Minecraft
  const gameResult = await getGameByName('Minecraft');
  if (!gameResult.data) {
    return Astro.redirect('/minecraft');
  }
  
  const gameId = gameResult.data.id;
  
  // Obtener servidor por slug
  const serverResult = await getServerBySlugWithTheme(server, gameId);
  
  if (!serverResult.data) {
    // Si no se encuentra el servidor, redirigir a la página principal de Minecraft
    return Astro.redirect('/minecraft');
  }
  
  dbServer = serverResult.data;
  
  // Verificar que el servidor pertenece al juego de Minecraft
  if (dbServer.games?.name !== 'Minecraft') {
    return Astro.redirect('/minecraft');
  }
  
  serverData = {
    name: dbServer.name,
    description: dbServer.description || 'Servidor de Minecraft',
    ip: dbServer.server_ip || 'No disponible',
    port: dbServer.server_port?.toString() || 'No disponible',
    version: dbServer.server_version || 'No especificada',
    players: `${dbServer.server_stats?.[0]?.online_players || 0}/${dbServer.max_players || 0}`,
    status: dbServer.is_active ? 'En línea' : 'Fuera de línea',
    image: dbServer.server_cover_image || dbServer.image || '/minecraft.svg',
    id: dbServer.id,
    game_id: dbServer.game_id,
    server_type: dbServer.server_type || 'survival'
  };
  
  // Obtener posts del servidor
  const postsResult = await getPostsByServerId(dbServer.id, currentUserId);
  if (postsResult.data) {
    posts = postsResult.data;
  }
  
} catch (error) {
  return Astro.redirect('/minecraft');
}
---

<Layout title={`${serverData.name} - Minecraft Server`}>
  <main class="min-h-screen bg-gradient-to-br from-calico-gray-900 via-calico-orange-900 to-calico-gray-900 relative overflow-hidden">
    <!-- Elementos animados de fondo -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute top-20 left-10 w-32 h-32 bg-green-500/10 rounded-full blur-xl animate-pulse"></div>
      <div class="absolute top-40 right-20 w-24 h-24 bg-emerald-500/10 rounded-full blur-xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-20 left-1/4 w-40 h-40 bg-green-400/5 rounded-full blur-xl animate-pulse delay-2000"></div>
      <div class="absolute bottom-40 right-1/3 w-28 h-28 bg-emerald-400/5 rounded-full blur-xl animate-pulse delay-3000"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 py-12 md:py-16">
      <!-- Header del servidor (mejorado estéticamente) -->
      <div class="relative glass-calico rounded-2xl p-8 md:p-10 lg:p-12 min-h-[220px] md:min-h-[260px] border border-calico-stripe-light/30 mb-8 overflow-hidden header-reveal">
        <!-- Fondo con imagen del servidor difuminada -->
        <div class="absolute inset-0">
          <img src={serverData.image} alt={`${serverData.name} background`} class="w-full h-full object-cover blur-md opacity-40 scale-110" />
          <div class="absolute inset-0 bg-gradient-to-br from-black/40 via-black/20 to-transparent"></div>
        </div>
        <div class="absolute -top-24 -right-24 w-72 h-72 bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-full blur-2xl z-0"></div>
        <div class="flex flex-col lg:flex-row items-start lg:items-center gap-6 relative z-10">
          <!-- Imagen del servidor -->
          <div class="relative shrink-0">
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-tr from-green-400/20 to-emerald-400/20 blur-sm"></div>
            <img src={serverData.image} alt={serverData.name} class="relative w-28 h-28 md:w-32 md:h-32 rounded-2xl object-cover ring-4 ring-green-400/20 shadow-xl" />
          </div>
          
          <!-- Texto y métricas -->
          <div class="flex-1">
            <div class="flex flex-wrap items-center gap-3 mb-2">
              <h1 class="text-3xl md:text-4xl font-extrabold text-calico-white tracking-tight">{serverData.name}</h1>
              <span class="px-3 py-1 rounded-full text-xs md:text-sm font-semibold bg-white/10 text-green-300 border border-green-400/20">
                {serverData.status}
              </span>
            </div>
            <p class="text-calico-gray-300 text-base md:text-lg mb-5 max-w-3xl">{serverData.description}</p>
            
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 header-reveal-delay">
              <div class="glass-calico rounded-xl p-4 border border-calico-stripe-light/20">
                <div class="flex items-center gap-3">
                  <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-3-3h-2m-4 5h5v-2a3 3 0 00-3-3h-2m-4 5h5v-2a3 3 0 00-3-3H8m-4 5h5v-2a3 3 0 00-3-3H4"></path></svg>
                  <div>
                    <div class="text-xs text-calico-gray-400">Jugadores</div>
                    <div class="text-lg md:text-xl font-bold text-green-400">{serverData.players}</div>
                  </div>
                </div>
              </div>
              <div class="glass-calico rounded-xl p-4 border border-calico-stripe-light/20">
                <div class="flex items-center gap-3">
                  <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 22A10 10 0 102 12a10 10 0 0010 10z"></path></svg>
                  <div>
                    <div class="text-xs text-calico-gray-400">Estado</div>
                    <div class="text-lg md:text-xl font-bold text-green-400">{serverData.status}</div>
                  </div>
                </div>
              </div>
              <div class="glass-calico rounded-xl p-4 border border-calico-stripe-light/20">
                <div class="flex items-center gap-3">
                  <svg class="w-5 h-5 text-calico-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m0 4v12m4-12v12m4-12v12"></path></svg>
                  <div>
                    <div class="text-xs text-calico-gray-400">Versión</div>
                    <div class="text-lg md:text-xl font-bold text-calico-white">{serverData.version}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- IP del servidor -->
          <div class="glass-calico rounded-xl p-5 border border-calico-stripe-light/20 bg-gradient-to-br from-green-500/5 to-emerald-500/5 w-full lg:w-auto">
            <div class="text-sm text-calico-gray-400 mb-2">Dirección del servidor</div>
            <div class="text-green-400 font-mono text-lg break-all">{serverData.ip}:{serverData.port}</div>
            <button class="mt-3 inline-flex items-center justify-center gap-2 bg-calico-green-600 hover:bg-calico-green-700 text-calico-white px-4 py-2 rounded-lg transition-colors w-full">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16h8M8 12h8M8 8h8"></path></svg>
              Copiar IP
            </button>
          </div>
        </div>
      </div>

      <!-- Sección de posts del servidor (alineada con muros de juegos) -->
      <section class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <!-- Formulario para crear post -->
          <div class="mb-12">
            <div class="glass-calico-dark rounded-2xl p-8">
              <h2 class="text-2xl font-bold text-calico-white mb-6 font-game">
                Comparte tu experiencia en {serverData.name}
              </h2>
              <PostForm 
                client:load
                serverId={serverData.id}
                gameId={serverData.game_id}
                serverName={serverData.name}
                placeholder={`¿Qué está pasando en ${serverData.name}?`}
                showNameField={false}
              />
            </div>
          </div>

          <!-- Lista de posts -->
          <PostsList 
            client:load
            initialPosts={posts}
            serverId={serverData.id}
            currentUserId={currentUserId}
            emptyMessage={`No hay publicaciones en ${serverData.name} aún. Comparte tu experiencia y sé el primero.`}
          />
        </div>
      </section>
    </div>
  </main>

  <script>
    // Función para cargar datos del servidor
    function initializeServerPage() {
      // Funcionalidad básica de la página del servidor
      setTimeout(() => {
        
        // Funcionalidad para copiar IP del servidor
        const copyButtons = document.querySelectorAll('button');
        copyButtons.forEach(button => {
          if (button.textContent && button.textContent.includes('Copiar IP')) {
            button.addEventListener('click', function() {
              const serverIPElement = this.parentElement?.querySelector('.font-mono');
              const serverIP = serverIPElement?.textContent || '';
              navigator.clipboard.writeText(serverIP).then(function() {
                // Cambiar texto del boton temporalmente
                const originalText = button.textContent;
                button.textContent = 'Copiado!';
                button.classList.add('bg-green-700');
                
                setTimeout(function() {
                  button.textContent = originalText;
                  button.classList.remove('bg-green-700');
                }, 2000);
              });
            });
          }
        });
      }, 100);
    }
    
    // Cargar datos cuando el DOM esté listo
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeServerPage);
    } else {
      initializeServerPage();
    }
    
    // También cargar en transiciones de Astro
    document.addEventListener('astro:page-load', initializeServerPage);
  </script>
  <style>
  @keyframes fadeUpSoft {
    0% { opacity: 0; transform: translateY(10px); }
    100% { opacity: 1; transform: translateY(0); }
  }
  .header-reveal { animation: fadeUpSoft 600ms cubic-bezier(.22,.8,.36,1) both; }
  .header-reveal-delay { animation: fadeUpSoft 750ms cubic-bezier(.22,.8,.36,1) both; }
  </style>
</Layout>