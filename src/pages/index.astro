---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import GameCard from '../components/GameCard.astro';
import { getAllGames } from '../utils/games';
import { supabase } from '../utils/supabaseClient';
import type { Game } from '../types/game';

// Obtener todos los juegos activos
const { data: games, error } = await getAllGames();

// Obtener el usuario actual si est√° autenticado
const { data: { user } } = await supabase.auth.getUser();
// En desarrollo, mostrar el bot√≥n siempre para facilitar las pruebas
const isDevelopment = import.meta.env.DEV;
const currentUserId = user?.id || (isDevelopment ? '550e8400-e29b-41d4-a716-446655440000' : null);
---

<Layout title="Juegos que Jugamos">
  
  <main class="min-h-screen bg-gradient-to-br from-calico-white via-calico-cream to-calico-orange-50 pt-16 pb-12 px-4 relative overflow-hidden">
    <!-- Animated background elements with calico patterns -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none z-0">
      <div class="absolute top-20 left-10 w-32 h-32 bg-calico-orange-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob calico-spots z-0"></div>
      <div class="absolute top-40 right-10 w-32 h-32 bg-calico-gray-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000 calico-fur-pattern z-0"></div>
      <div class="absolute -bottom-8 left-20 w-32 h-32 bg-calico-orange-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000 calico-texture z-0"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 calico-pattern opacity-30 rounded-full animate-calico-pulse z-0"></div>
      
      <!-- Cat paw prints scattered around -->
      <div class="absolute top-16 left-1/4 w-8 h-8 text-calico-orange-400 opacity-30 animate-pulse">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-32 right-1/3 w-6 h-6 text-calico-gray-400 opacity-25 animate-bounce" style="animation-delay: 1s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute bottom-32 left-1/3 w-7 h-7 text-calico-orange-300 opacity-20 animate-pulse" style="animation-delay: 2s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-2/3 right-1/4 w-6 h-6 text-calico-gray-300 opacity-30 animate-bounce" style="animation-delay: 0.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Cat paw print SVG -->
          <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
        </svg>
      </div>
      
      <!-- Gaming controller decorations -->
      <div class="absolute top-1/4 right-16 w-8 h-8 text-calico-orange-500 opacity-20 animate-pulse" style="animation-delay: 1.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
        </svg>
      </div>
      <div class="absolute bottom-1/4 left-16 w-6 h-6 text-calico-gray-400 opacity-25 animate-bounce" style="animation-delay: 2.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
        </svg>
      </div>
    </div>
    
    <div class="max-w-6xl mx-auto relative z-10">
      <!-- Hero Section -->
      <div class="text-center mb-16 relative">
        <!-- Decorative cat ears at the top -->
        <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
          <div class="w-3 h-3 bg-calico-orange-400 rounded-full opacity-60 animate-pulse"></div>
          <div class="w-3 h-3 bg-calico-orange-400 rounded-full opacity-60 animate-pulse" style="animation-delay: 0.5s;"></div>
        </div>
        
        <!-- TTina mascot image with Easter Egg -->
        <div class="mb-8 relative">
          <img 
            id="ttina-easter-egg"
            src="/TTina.png" 
            alt="TTina - Mascota de TiChat" 
            class="w-40 h-40 mx-auto rounded-full shadow-2xl border-4 border-calico-orange-400 hover:scale-105 transition-transform duration-300 animate-pulse cursor-pointer select-none"
            title="¬°Haz clic en TTina! üê±"
          />
          <p id="ttina-message" class="text-calico-gray-800 text-lg mt-3 font-semibold transition-all duration-500">¬°TTina te da la bienvenida! üêæ</p>
          
          <!-- Contador secreto de clics -->
          <div id="ttina-counter" class="absolute -top-2 -right-2 bg-calico-orange-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center opacity-0 transition-opacity duration-300">
            0
          </div>
          
          <!-- Contenedor para efectos visuales -->
          <div id="ttina-effects" class="absolute inset-0 pointer-events-none"></div>
        </div>
        
        <div class="inline-block p-1 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full mb-6 relative">
          <!-- Small paw prints around the badge -->
          <div class="absolute -top-2 -left-2 w-3 h-3 text-calico-orange-400 opacity-40">
            <svg fill="currentColor" viewBox="0 0 24 24">
              <!-- Real cat paw print -->
              <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
              <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
              <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
            </svg>
          </div>
          <div class="absolute -bottom-2 -right-2 w-3 h-3 text-calico-gray-400 opacity-40">
            <svg fill="currentColor" viewBox="0 0 24 24">
              <!-- Real cat paw print -->
              <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
              <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
              <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
            </svg>
          </div>
          <div class="glass-calico calico-pattern rounded-full px-6 py-2 border border-calico-stripe-light/30">
            <span class="text-sm font-medium text-calico-white">üéÆ Plataforma Gaming</span>
          </div>
        </div>
        <h1 class="text-5xl md:text-7xl font-bold text-center mb-6">
          <span class="text-transparent bg-clip-text bg-gradient-to-r from-slate-900 via-calico-orange-600 to-slate-800 drop-shadow-2xl">
            Juegos que Jugamos
          </span>
        </h1>
        <p class="text-xl md:text-2xl text-center text-slate-800 mb-8 max-w-3xl mx-auto leading-relaxed">
          Revive los <span class="text-calico-orange-600 font-semibold">mejores momentos</span> de juego con tus amigos y
          <span class="text-slate-900 font-semibold">comparte nuevas aventuras</span>
        </p>
        <div class="flex justify-center space-x-4 relative">
          <!-- Cat paw prints on sides -->
          <div class="absolute -left-8 top-1/2 transform -translate-y-1/2 w-6 h-6 text-calico-orange-300 opacity-30">
            <svg fill="currentColor" viewBox="0 0 24 24">
              <!-- Cat paw print SVG -->
              <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
              <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
              <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
            </svg>
          </div>
          <div class="absolute -right-8 top-1/2 transform -translate-y-1/2 w-6 h-6 text-calico-gray-300 opacity-30">
            <svg fill="currentColor" viewBox="0 0 24 24">
              <!-- Cat paw print SVG -->
              <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
              <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
              <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
              <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
            </svg>
          </div>
          
          <div class="w-2 h-2 bg-calico-orange-500 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-calico-gray-500 rounded-full animate-bounce animation-delay-200"></div>
          <div class="w-2 h-2 bg-calico-stripe-medium rounded-full animate-bounce animation-delay-400"></div>
        </div>
      </div>
      
      <!-- Games Grid Section -->
      <div class="relative">
        <!-- Decorative elements around the games section -->
        <div class="absolute -top-6 left-8 w-7 h-7 text-calico-orange-400 opacity-25 animate-pulse">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        <div class="absolute -top-6 right-8 w-7 h-7 text-calico-gray-400 opacity-25 animate-bounce">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        <div class="absolute -bottom-6 left-1/4 w-4 h-4 text-calico-orange-300 opacity-30 animate-pulse" style="animation-delay: 1s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
          </svg>
        </div>
        <div class="absolute -bottom-6 right-1/4 w-4 h-4 text-calico-gray-300 opacity-30 animate-bounce" style="animation-delay: 1.5s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
          </svg>
        </div>
        
        <div class="absolute inset-0 bg-gradient-to-r from-calico-orange-500/10 to-calico-gray-500/10 rounded-3xl blur-3xl"></div>
        <div class="relative bg-white/90 backdrop-blur-md rounded-3xl p-8 border border-calico-gray-200 shadow-lg calico-pattern gaming-pattern">
          <div class="flex flex-col sm:flex-row items-center justify-between mb-8 gap-4">
            <h2 class="text-3xl font-bold">
              <span class="text-transparent bg-clip-text bg-gradient-to-r from-slate-900 via-calico-orange-700 to-slate-900">
                Selecciona tu Juego
              </span>
            </h2>
            {currentUserId && (
              <button 
                id="add-game-btn"
                class="group relative px-6 py-3 bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 hover:from-calico-orange-600 hover:to-calico-orange-700 text-black font-semibold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-calico-orange-500/25 flex items-center space-x-2"
              >
                <svg class="w-5 h-5 transition-transform group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <span>A√±adir Juego</span>
              </button>
            )}
          </div>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8">
            {games && games.length > 0 ? (
               games.map((game) => (
                 <GameCard 
                   game={game}
                   userId={currentUserId || undefined}
                 />
               ))
             ) : (
               <div class="col-span-full text-center text-gray-600">
                 <p>No hay juegos disponibles en este momento.</p>
               </div>
             )}
           </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Import React and ReactDOM for the modal
  import React from 'react';
  import { createRoot } from 'react-dom/client';
  import CreateGameForm from '../components/CreateGameForm';
  import EditGameForm from '../components/EditGameForm';
  import type { Game } from '../types/game';

  // Function to fetch updated games list
  async function fetchUpdatedGames() {
    try {
      const response = await fetch('/api/games');
      if (!response.ok) {
        throw new Error('Error fetching games');
      }
      const result = await response.json();
      return result.data || [];
    } catch (error) {
      console.error('Error fetching updated games:', error);
      return null;
    }
  }

  // Function to update the games grid dynamically
  async function updateGamesGrid() {
    const gamesGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3');
    if (!gamesGrid) return;

    // Show loading state
    gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>Actualizando lista de juegos...</p></div>';

    const updatedGames = await fetchUpdatedGames();
    
    if (updatedGames === null) {
      // Error fetching, reload page as fallback
      window.location.reload();
      return;
    }

    if (updatedGames.length === 0) {
      gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>No hay juegos disponibles en este momento.</p></div>';
      return;
    }

    // Update the grid with new games
    // For now, we'll reload the page to ensure proper rendering of Astro components
    // In a future enhancement, this could be replaced with dynamic component rendering
    window.location.reload();
  }

  // Function to show the create game modal
  function showCreateGameModal() {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'create-game-modal';
    document.body.appendChild(modalContainer);

    // Create React root and render the form
    const root = createRoot(modalContainer);
    
    const handleGameCreated = async (newGame: Game) => {
      console.log('‚úÖ Nuevo juego creado:', newGame);
      
      // Close modal
      root.unmount();
      document.body.removeChild(modalContainer);
      
      // Update games list dynamically
      await updateGamesGrid();
    };

    const handleCancel = () => {
      root.unmount();
      document.body.removeChild(modalContainer);
    };

    root.render(
      React.createElement(CreateGameForm, {
        onGameCreated: handleGameCreated,
        onCancel: handleCancel
      })
    );
  }

  // Function to show the edit game modal
  function showEditGameModal(gameData: any) {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'edit-game-modal';
    document.body.appendChild(modalContainer);

    // Create React root and render the form
    const root = createRoot(modalContainer);
    
    const handleGameUpdated = async () => {
      console.log('‚úÖ Juego actualizado');
      
      // Close modal
      root.unmount();
      document.body.removeChild(modalContainer);
      
      // Update games list dynamically
      await updateGamesGrid();
    };

    const handleCancel = () => {
      root.unmount();
      document.body.removeChild(modalContainer);
    };

    root.render(
      React.createElement(EditGameForm, {
        game: gameData,
        isOpen: true,
        onClose: handleCancel,
        onSuccess: handleGameUpdated
      })
    );
  }

  // Make showEditGameModal available globally
  (window as any).showEditGameModal = showEditGameModal;

  // Add event listener to the add game button
  document.addEventListener('DOMContentLoaded', () => {
    const addGameBtn = document.getElementById('add-game-btn');
    if (addGameBtn) {
      addGameBtn.addEventListener('click', showCreateGameModal);
    }

    // Add event listener for edit game events
    window.addEventListener('openEditGameModal', (event: any) => {
      const gameData = event.detail;
      if (gameData && gameData.id) {
        showEditGameModal(gameData);
      }
    });

    // üê± TTina Easter Egg Implementation
    let ttinaClickCount = 0;
    const ttinaMessages = [
      "¬°Miau! üê±",
      "¬°TTina est√° feliz! üò∏",
      "¬°Ronroneo activado! üòª",
      "¬°M√°s caricias por favor! üêæ",
      "¬°Soy la mejor mascota! üíñ",
      "¬°Miau miau! üéµ",
      "¬°Hora de jugar! üéÆ",
      "¬°TTina te ama! ‚ù§Ô∏è",
      "¬°Purr purr! üòΩ",
      "¬°Secreto desbloqueado! ‚ú®"
    ];

    function createHeartEffect(x: number, y: number) {
      const heart = document.createElement('div');
      heart.innerHTML = 'üíñ';
      heart.style.cssText = `
        position: fixed;
        left: ${x}px;
        top: ${y}px;
        font-size: 20px;
        pointer-events: none;
        z-index: 1000;
        animation: heartFloat 2s ease-out forwards;
      `;
      
      document.body.appendChild(heart);
      setTimeout(() => heart.remove(), 2000);
    }

    function createPawEffect(container: HTMLElement) {
      const paw = document.createElement('div');
      paw.innerHTML = 'üêæ';
      paw.style.cssText = `
        position: absolute;
        font-size: 24px;
        animation: pawSpin 1s ease-out forwards;
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
      `;
      
      container.appendChild(paw);
      setTimeout(() => paw.remove(), 1000);
    }

    function playMeowSound() {
      // Crear sonido de maullido usando Web Audio API
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
      oscillator.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 0.3);
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.3);
    }

    const ttinaImg = document.getElementById('ttina-easter-egg');
    const ttinaMessage = document.getElementById('ttina-message');
    const ttinaCounter = document.getElementById('ttina-counter');
    const ttinaEffects = document.getElementById('ttina-effects');

    if (ttinaImg && ttinaMessage && ttinaCounter && ttinaEffects) {
      ttinaImg.addEventListener('click', (e) => {
        ttinaClickCount++;
        
        // Actualizar contador
        ttinaCounter.textContent = ttinaClickCount.toString();
        if (ttinaClickCount >= 3) {
          ttinaCounter.style.opacity = '1';
        }
        
        // Cambiar mensaje
        const randomMessage = ttinaMessages[Math.floor(Math.random() * ttinaMessages.length)];
        ttinaMessage.textContent = randomMessage;
        
        // Efectos visuales
        const rect = ttinaImg.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        createHeartEffect(centerX + (Math.random() - 0.5) * 100, centerY + (Math.random() - 0.5) * 100);
        createPawEffect(ttinaEffects);
        
        // Animaciones especiales
        ttinaImg.style.animation = 'none';
        setTimeout(() => {
          if (ttinaClickCount % 5 === 0) {
            ttinaImg.style.animation = 'spin 1s ease-in-out, bounce 0.5s ease-in-out';
          } else if (ttinaClickCount % 3 === 0) {
            ttinaImg.style.animation = 'wiggle 0.5s ease-in-out';
          } else {
            ttinaImg.style.animation = 'bounce 0.5s ease-in-out';
          }
        }, 10);
        
        // Sonido de maullido
        try {
          playMeowSound();
        } catch (error) {
          console.log('üîá Audio no disponible');
        }
        
        // Easter egg especial cada 10 clics
        if (ttinaClickCount % 10 === 0) {
          ttinaMessage.textContent = `¬°S√öPER SECRETO! Has hecho clic ${ttinaClickCount} veces! üåü`;
          ttinaMessage.style.color = '#f97316';
          ttinaImg.style.filter = 'hue-rotate(180deg)';
          
          // Lluvia de corazones
          for (let i = 0; i < 5; i++) {
            setTimeout(() => {
              createHeartEffect(
                centerX + (Math.random() - 0.5) * 200,
                centerY + (Math.random() - 0.5) * 200
              );
            }, i * 200);
          }
          
          setTimeout(() => {
            ttinaImg.style.filter = 'none';
            ttinaMessage.style.color = '';
          }, 3000);
        }
        
        // Resetear animaci√≥n despu√©s de un tiempo
        setTimeout(() => {
          ttinaImg.style.animation = 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite';
        }, 1000);
      });
    }
  });
</script>

<!-- Estilos CSS para las animaciones del Easter Egg -->
<style>
  @keyframes heartFloat {
    0% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) scale(0.5);
      opacity: 0;
    }
  }
  
  @keyframes pawSpin {
    0% {
      transform: rotate(0deg) scale(1);
      opacity: 1;
    }
    100% {
      transform: rotate(360deg) scale(0);
      opacity: 0;
    }
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0,-30px,0);
    }
    70% {
      transform: translate3d(0,-15px,0);
    }
    90% {
      transform: translate3d(0,-4px,0);
    }
  }
  
  @keyframes wiggle {
    0%, 7% {
      transform: rotateZ(0);
    }
    15% {
      transform: rotateZ(-15deg);
    }
    20% {
      transform: rotateZ(10deg);
    }
    25% {
      transform: rotateZ(-10deg);
    }
    30% {
      transform: rotateZ(6deg);
    }
    35% {
      transform: rotateZ(-4deg);
    }
    40%, 100% {
      transform: rotateZ(0);
    }
  }
</style>