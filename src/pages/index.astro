---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import GameCard from '../components/GameCard.astro';
import { getAllGames } from '../utils/games';
import { supabase } from '../utils/supabaseClient';
import type { Game } from '../types/game';

// Obtener todos los juegos activos
const { data: games, error } = await getAllGames();

// Obtener el usuario actual si estÃ¡ autenticado
const { data: { user } } = await supabase.auth.getUser();
const currentUserId = user?.id;
---

<Layout title="Juegos que Jugamos">
  
  <main class="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 py-12 px-4 relative overflow-hidden">
    <!-- Animated background elements -->
    <div class="absolute inset-0 overflow-hidden">
      <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
      <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse animation-delay-4000"></div>
    </div>
    
    <div class="max-w-6xl mx-auto relative z-10">
      <!-- Hero Section -->
      <div class="text-center mb-16">
        <div class="inline-block p-1 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full mb-6">
          <div class="bg-slate-900 rounded-full px-6 py-2">
            <span class="text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400 font-semibold">ðŸŽ® Gaming Memories</span>
          </div>
        </div>
        <h1 class="text-5xl md:text-7xl font-bold text-center mb-6">
          <span class="text-transparent bg-clip-text bg-gradient-to-r from-white via-purple-200 to-blue-200 drop-shadow-2xl">
            Juegos que Jugamos
          </span>
        </h1>
        <p class="text-xl md:text-2xl text-center text-gray-300 mb-8 max-w-3xl mx-auto leading-relaxed">
          Revive los <span class="text-purple-400 font-semibold">mejores momentos</span> de juego con tus amigos y 
          <span class="text-blue-400 font-semibold">comparte nuevas aventuras</span>
        </p>
        <div class="flex justify-center space-x-4">
          <div class="w-2 h-2 bg-purple-500 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce animation-delay-200"></div>
          <div class="w-2 h-2 bg-indigo-500 rounded-full animate-bounce animation-delay-400"></div>
        </div>
      </div>
      
      <!-- Games Grid Section -->
      <div class="relative">
        <div class="absolute inset-0 bg-gradient-to-r from-purple-500/10 to-blue-500/10 rounded-3xl blur-3xl"></div>
        <div class="relative bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/10">
          <div class="flex flex-col sm:flex-row items-center justify-between mb-8 gap-4">
            <h2 class="text-3xl font-bold text-white">
              <span class="text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400">
                Selecciona tu Juego
              </span>
            </h2>
            {currentUserId && (
              <button 
                id="add-game-btn"
                class="group relative px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25 flex items-center space-x-2"
              >
                <svg class="w-5 h-5 transition-transform group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <span>AÃ±adir Juego</span>
              </button>
            )}
          </div>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {games && games.length > 0 ? (
               games.map((game) => (
                 <GameCard 
                   game={game}
                   userId={currentUserId}
                 />
               ))
             ) : (
               <div class="col-span-full text-center text-gray-400">
                 <p>No hay juegos disponibles en este momento.</p>
               </div>
             )}
           </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Import React and ReactDOM for the modal
  import React from 'react';
  import { createRoot } from 'react-dom/client';
  import CreateGameForm from '../components/CreateGameForm';

  // Function to fetch updated games list
  async function fetchUpdatedGames() {
    try {
      const response = await fetch('/api/games');
      if (!response.ok) {
        throw new Error('Error fetching games');
      }
      const result = await response.json();
      return result.data || [];
    } catch (error) {
      console.error('Error fetching updated games:', error);
      return null;
    }
  }

  // Function to update the games grid dynamically
  async function updateGamesGrid() {
    const gamesGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3');
    if (!gamesGrid) return;

    // Show loading state
    gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>Actualizando lista de juegos...</p></div>';

    const updatedGames = await fetchUpdatedGames();
    
    if (updatedGames === null) {
      // Error fetching, reload page as fallback
      window.location.reload();
      return;
    }

    if (updatedGames.length === 0) {
      gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>No hay juegos disponibles en este momento.</p></div>';
      return;
    }

    // Update the grid with new games
    // For now, we'll reload the page to ensure proper rendering of Astro components
    // In a future enhancement, this could be replaced with dynamic component rendering
    window.location.reload();
  }

  // Function to show the create game modal
  function showCreateGameModal() {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'create-game-modal';
    document.body.appendChild(modalContainer);

    // Create React root and render the form
    const root = createRoot(modalContainer);
    
    const handleGameCreated = async (newGame: Game) => {
      console.log('âœ… Nuevo juego creado:', newGame);
      
      // Close modal
      root.unmount();
      document.body.removeChild(modalContainer);
      
      // Update games list dynamically
      await updateGamesGrid();
    };

    const handleCancel = () => {
      root.unmount();
      document.body.removeChild(modalContainer);
    };

    root.render(
      React.createElement(CreateGameForm, {
        onGameCreated: handleGameCreated,
        onCancel: handleCancel
      })
    );
  }

  // Add event listener to the add game button
  document.addEventListener('DOMContentLoaded', () => {
    const addGameBtn = document.getElementById('add-game-btn');
    if (addGameBtn) {
      addGameBtn.addEventListener('click', showCreateGameModal);
    }
  });
</script>