---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import GameCard from '../components/GameCard.astro';
import TinaEasterEgg from '../components/react/TinaEasterEgg';
import { getAllGames } from '../utils/games';
import { supabase } from '../utils/supabaseClient';
import type { Game } from '../types/game';

// Obtener todos los juegos activos
const { data: games, error } = await getAllGames();

// Obtener el usuario actual si está autenticado
const { data: { user } } = await supabase.auth.getUser();
// En desarrollo, NO mostrar el botón automáticamente para probar la funcionalidad real
const currentUserId = user?.id || null;
---

<Layout title="Juegos que Jugamos">
  
  <main class="min-h-screen bg-gradient-to-br from-calico-white via-calico-cream to-calico-orange-50 pt-24 pb-12 px-4 relative overflow-hidden">
    <!-- Animated background elements with calico patterns -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none z-0">
      <div class="absolute top-20 left-10 w-32 h-32 bg-calico-orange-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob calico-spots z-0"></div>
      <div class="absolute top-40 right-10 w-32 h-32 bg-calico-gray-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000 calico-fur-pattern z-0"></div>
      <div class="absolute -bottom-8 left-20 w-32 h-32 bg-calico-orange-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000 calico-texture z-0"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 calico-pattern opacity-30 rounded-full animate-calico-pulse z-0"></div>
      
      <!-- Cat paw prints scattered around -->
      <div class="absolute top-16 left-1/4 w-8 h-8 text-calico-orange-400 opacity-30 animate-pulse">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-32 right-1/3 w-6 h-6 text-calico-gray-400 opacity-25 animate-bounce" style="animation-delay: 1s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute bottom-32 left-1/3 w-7 h-7 text-calico-orange-300 opacity-20 animate-pulse" style="animation-delay: 2s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Real cat paw print -->
          <ellipse cx="12" cy="8" rx="2.5" ry="3" fill="currentColor"/>
          <ellipse cx="8" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="16" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="10" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
          <ellipse cx="14" cy="16" rx="1.2" ry="1.8" fill="currentColor"/>
        </svg>
      </div>
      <div class="absolute top-2/3 right-1/4 w-6 h-6 text-calico-gray-300 opacity-30 animate-bounce" style="animation-delay: 0.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <!-- Cat paw print SVG -->
          <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
          <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
          <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
        </svg>
      </div>
      
      <!-- Gaming controller decorations -->
      <div class="absolute top-1/4 right-16 w-8 h-8 text-calico-orange-500 opacity-20 animate-pulse" style="animation-delay: 1.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
        </svg>
      </div>
      <div class="absolute bottom-1/4 left-16 w-6 h-6 text-calico-gray-400 opacity-25 animate-bounce" style="animation-delay: 2.5s;">
        <svg fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
        </svg>
      </div>
    </div>
    
    <div class="max-w-6xl mx-auto relative z-10 px-4 sm:px-6 lg:px-8">
      <!-- Hero Section -->
      <div class="mb-12 sm:mb-16 md:mb-20 relative">
        <!-- Decorative cat ears at the top -->
        <div class="absolute -top-2 sm:-top-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
          <div class="w-2 h-2 sm:w-3 sm:h-3 bg-calico-orange-400 rounded-full opacity-60 animate-pulse"></div>
          <div class="w-2 h-2 sm:w-3 sm:h-3 bg-calico-orange-400 rounded-full opacity-60 animate-pulse" style="animation-delay: 0.5s;"></div>
        </div>
        
        <!-- Two Column Layout - Responsive Grid -->
        <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-8 md:gap-10 lg:gap-12 items-center min-h-[400px] md:min-h-[500px] lg:min-h-[500px]">
          <!-- Left Column: Text Content -->
          <div class="space-y-8 md:space-y-10 text-center md:text-center lg:text-left order-2 lg:order-1">
            
            
            <!-- Main Title -->
            <h1 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold leading-[1.1] tracking-tight mb-2">
              <span class="hero-title drop-shadow-2xl">
                JUEGOS QUE<br>
                <span class="hero-title-accent">JUGAMOS</span>
              </span>
            </h1>
            
            <!-- Subtitle -->
            <p class="text-lg sm:text-xl md:text-xl lg:text-2xl hero-subtitle leading-relaxed max-w-lg mx-auto lg:mx-0 font-medium px-4 lg:px-0">
              Revive los <span class="hero-subtitle-accent font-semibold">mejores momentos</span> de juego con tus amigos y
              <span class="hero-subtitle-emphasis font-semibold">comparte nuevas aventuras</span>
            </p>
            
            <!-- Decorative dots -->
            <div class="flex justify-center lg:justify-start space-x-4 relative">
              <!-- Cat paw prints on sides - Hidden on small screens -->
              <div class="hidden lg:block absolute -left-8 top-1/2 transform -translate-y-1/2 w-6 h-6 text-calico-orange-300 opacity-30">
                <svg fill="currentColor" viewBox="0 0 24 24">
                  <!-- Cat paw print SVG -->
                  <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
                  <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
                  <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
                  <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
                  <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
                </svg>
              </div>
              <div class="hidden lg:block absolute -right-8 top-1/2 transform -translate-y-1/2 w-6 h-6 text-calico-gray-300 opacity-30">
                <svg fill="currentColor" viewBox="0 0 24 24">
                  <!-- Cat paw print SVG -->
                  <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
                  <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
                  <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
                  <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
                  <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
                </svg>
              </div>
              
              <div class="w-2 h-2 bg-calico-orange-500 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-calico-gray-500 rounded-full animate-bounce animation-delay-200"></div>
              <div class="w-2 h-2 bg-calico-stripe-medium rounded-full animate-bounce animation-delay-400"></div>
            </div>
          </div>
          
          <!-- Right Column: TTina Image with Speech Bubble -->
          <div class="flex justify-center order-1 lg:order-2 lg:justify-end relative">
            <TinaEasterEgg 
              client:load
              variant="home"
              showSpeechBubble={true}
            />
          </div>
        </div>
      </div>
      
      <!-- Games Grid Section -->
      <div class="relative">
        <!-- Decorative elements around the games section -->
        <div class="absolute -top-6 left-8 w-7 h-7 text-calico-orange-400 opacity-25 animate-pulse">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        <div class="absolute -top-6 right-8 w-7 h-7 text-calico-gray-400 opacity-25 animate-bounce">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        <div class="absolute -bottom-6 left-1/4 w-4 h-4 text-calico-orange-300 opacity-30 animate-pulse" style="animation-delay: 1s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
          </svg>
        </div>
        <div class="absolute -bottom-6 right-1/4 w-4 h-4 text-calico-gray-300 opacity-30 animate-bounce" style="animation-delay: 1.5s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
          </svg>
        </div>
        
        <div class="absolute inset-0 bg-gradient-to-r from-calico-orange-500/10 to-calico-gray-500/10 rounded-3xl blur-3xl"></div>
        <div class="relative bg-white/90 backdrop-blur-md rounded-3xl p-8  shadow-lg calico-pattern gaming-pattern">
          <div class="flex flex-col sm:flex-row items-center justify-between mb-8 gap-4">
            <h2 class="text-3xl font-bold text-primary">
              Selecciona tu Juego
            </h2>
            <button 
              id="add-game-btn"
              class="group relative px-6 py-3 bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 hover:from-calico-orange-600 hover:to-calico-orange-700 text-white font-semibold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-calico-orange-500/25 flex items-center space-x-2"
              style="display: none;"
            >
              <svg class="w-5 h-5 transition-transform group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              <span>Añadir Juego</span>
            </button>
          </div>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8">
            {games && games.length > 0 ? (
               games.map((game) => (
                 <GameCard 
                   game={game}
                   userId={currentUserId || undefined}
                 />
               ))
             ) : (
               <div class="col-span-full text-center text-gray-600">
                 <p>No hay juegos disponibles en este momento.</p>
               </div>
             )}
           </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Import React and ReactDOM for the modal
  import React from 'react';
  import { createRoot } from 'react-dom/client';
  import CreateGameForm from '../components/CreateGameForm';
  import EditGameForm from '../components/EditGameForm';
  import type { Game } from '../types/game';

  // Function to fetch updated games list
  async function fetchUpdatedGames() {
    try {
      const response = await fetch('/api/games');
      if (!response.ok) {
        throw new Error('Error fetching games');
      }
      const result = await response.json();
      return result.data || [];
    } catch (error) {
      return null;
    }
  }

  // Function to update the games grid dynamically
  async function updateGamesGrid() {
    const gamesGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3');
    if (!gamesGrid) return;

    // Show loading state
    gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>Actualizando lista de juegos...</p></div>';

    const updatedGames = await fetchUpdatedGames();
    
    if (updatedGames === null) {
      // Error fetching, reload page as fallback
      window.location.reload();
      return;
    }

    if (updatedGames.length === 0) {
      gamesGrid.innerHTML = '<div class="col-span-full text-center text-gray-400"><p>No hay juegos disponibles en este momento.</p></div>';
      return;
    }

    // Update the grid with new games
    // For now, we'll reload the page to ensure proper rendering of Astro components
    // In a future enhancement, this could be replaced with dynamic component rendering
    window.location.reload();
  }

  // Function to show the create game modal
  function showCreateGameModal() {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'create-game-modal';
    document.body.appendChild(modalContainer);

    // Create React root and render the form
    const root = createRoot(modalContainer);
    
    const handleGameCreated = async (newGame: Game) => {
      // Close modal
      root.unmount();
      document.body.removeChild(modalContainer);
      
      // Update games list dynamically
      await updateGamesGrid();
    };

    const handleCancel = () => {
      root.unmount();
      document.body.removeChild(modalContainer);
    };

    root.render(
      React.createElement(CreateGameForm, {
        onGameCreated: handleGameCreated,
        onCancel: handleCancel
      })
    );
  }

  // Function to show the edit game modal
  function showEditGameModal(gameData: any) {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'edit-game-modal';
    document.body.appendChild(modalContainer);

    // Create React root and render the form
    const root = createRoot(modalContainer);
    
    const handleGameUpdated = async () => {
      // Close modal
      root.unmount();
      document.body.removeChild(modalContainer);
      
      // Update games list dynamically
      await updateGamesGrid();
    };

    const handleCancel = () => {
      root.unmount();
      document.body.removeChild(modalContainer);
    };

    root.render(
      React.createElement(EditGameForm, {
        game: gameData,
        isOpen: true,
        onClose: handleCancel,
        onSuccess: handleGameUpdated
      })
    );
  }

  // Make showEditGameModal available globally
  (window as any).showEditGameModal = showEditGameModal;

  // Function to check authentication status
  function checkAuthenticationStatus() {
    const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
    
    if (!userSession) {
      return null;
    }

    try {
      const session = JSON.parse(userSession);
      if (session.user && session.access_token) {
        return session;
      }
    } catch (error) {
      // Error parsing user session
      localStorage.removeItem('userSession');
      sessionStorage.removeItem('userSession');
    }
    
    return null;
  }

  // Function to update UI based on authentication status
  function updateUIForAuthentication() {
    const session = checkAuthenticationStatus();
    const addGameBtn = document.getElementById('add-game-btn');
    const gameCards = document.querySelectorAll('[data-game-id]');
    
    if (session) {
      // User is authenticated - show add game button
      if (addGameBtn) {
        addGameBtn.style.display = 'flex';
        addGameBtn.style.visibility = 'visible';
        addGameBtn.style.opacity = '1';
      }
      
      // Show edit and delete buttons on game cards
      gameCards.forEach(card => {
        const editBtn = card.querySelector('.edit-game-btn');
        const deleteBtn = card.querySelector('.delete-game-btn');
        
        if (editBtn && editBtn instanceof HTMLElement) {
          editBtn.style.display = 'block';
          editBtn.style.visibility = 'visible';
        }
        if (deleteBtn && deleteBtn instanceof HTMLElement) {
          deleteBtn.style.display = 'block';
          deleteBtn.style.visibility = 'visible';
        }
      });
    } else {
      // User is not authenticated - hide add game button
      if (addGameBtn) {
        addGameBtn.style.display = 'none';
        addGameBtn.style.visibility = 'hidden';
        addGameBtn.style.opacity = '0';
      }
      
      // Hide edit and delete buttons on game cards
      gameCards.forEach(card => {
        const editBtn = card.querySelector('.edit-game-btn');
        const deleteBtn = card.querySelector('.delete-game-btn');
        
        if (editBtn && editBtn instanceof HTMLElement) {
          editBtn.style.display = 'none';
          editBtn.style.visibility = 'hidden';
        }
        if (deleteBtn && deleteBtn instanceof HTMLElement) {
          deleteBtn.style.display = 'none';
          deleteBtn.style.visibility = 'hidden';
        }
      });
    }
  }

  // Function to force UI update - more aggressive approach
  function forceUIUpdate() {
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      updateUIForAuthentication();
    }, 50);
  }

  // Attach event listeners and initialize UI once, regardless of load timing
  function attachIndexListenersOnce() {
    if ((window as any).__indexInitDone) return;
    (window as any).__indexInitDone = true;

    // Initial authentication check
    forceUIUpdate();

    const addGameBtn = document.getElementById('add-game-btn');
    if (addGameBtn && !(addGameBtn as any).__bound) {
      addGameBtn.addEventListener('click', showCreateGameModal);
      (addGameBtn as any).__bound = true;
    }

    // Listen for authentication changes (cross-tab)
    window.addEventListener('storage', (e) => {
      if (e.key === 'userSession' || e.key === 'sessionStorage') {
        forceUIUpdate();
      }
    });

    // Listen for custom authentication events
    window.addEventListener('authStateChanged', () => {
      forceUIUpdate();
    });

    // Add event listener for edit game events
    window.addEventListener('openEditGameModal', (event: any) => {
      const gameData = event.detail;
      if (gameData && gameData.id) {
        showEditGameModal(gameData);
      }
    });

    // Listen for page visibility changes (when user returns to tab)
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        forceUIUpdate();
      }
    });

    // Listen for focus events (when user returns to window)
    window.addEventListener('focus', () => {
      forceUIUpdate();
    });

    // Listen for popstate events (browser back/forward navigation)
    window.addEventListener('popstate', () => {
      forceUIUpdate();
    });

    // Additional check after a short delay to catch any missed updates
    setTimeout(() => {
      forceUIUpdate();
    }, 100);
  }

  // Ensure listeners are attached both for late and early script execution
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      attachIndexListenersOnce();
    });
  } else {
    attachIndexListenersOnce();
  }
</script>