---
import Layout from '../layouts/Layout.astro';
import PostCard from './PostCard.astro';
import PostForm from './react/PostForm.tsx';
import PostsList from './react/PostsList.tsx';
import ThemeProvider from './ThemeProvider.astro';
import { getPostsByGameId } from '../utils/posts';
import { getCurrentUser } from '../utils/auth';
import { getDynamicTextStyles } from '../utils/colorAnalysis';
import type { Game, ThemeConfig } from '../utils/games';
import type { Post } from '../utils/posts';

interface Props {
  game: Game;
  themeConfig: ThemeConfig;
}

const { game, themeConfig } = Astro.props;

// Obtener usuario actual
const currentUser = await getCurrentUser(Astro.request);

// Obtener posts del juego
const { data: posts, error: postsError } = await getPostsByGameId(game.id);

if (postsError) {
  // Silent error handling
}

const gamePosts = posts || [];

// Configurar imágenes desde el juego
const heroImage = game.cover_image_url || themeConfig.images?.hero || 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=1200&h=600&fit=crop';

// Obtener estilos dinámicos basados en la imagen del juego
const dynamicStyles = await getDynamicTextStyles(heroImage, game.name);
const gameIcon = game.cover_image_url || themeConfig.images?.icon || '/favicon.svg';
---

<Layout title={`${game.name} - Gaming Community`}>
  <ThemeProvider themeConfig={themeConfig}>
    <!-- Fondo animado personalizado -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none">
      <div class="absolute inset-0 bg-gradient-game opacity-90"></div>
      
      <!-- Partículas animadas y elementos gaming -->
      <div class="absolute inset-0">
        <!-- Gaming controller decorations -->
        <div class="absolute top-20 left-10 w-8 h-8 text-accent/20 animate-bounce" style="animation-delay: 0.5s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M21,6H18V4A2,2 0 0,0 16,2H8A2,2 0 0,0 6,4V6H3A1,1 0 0,0 2,7V8A3,3 0 0,0 5,11H6.83L7.83,15.72C7.96,16.32 8.5,16.76 9.11,16.76H14.89C15.5,16.76 16.04,16.32 16.17,15.72L17.17,11H19A3,3 0 0,0 22,8V7A1,1 0 0,0 21,6M8,4H16V6H8V4M6.2,8H17.8L17,11H7L6.2,8Z"/>
          </svg>
        </div>
        <div class="absolute bottom-20 right-10 w-6 h-6 text-accent/15 animate-pulse" style="animation-delay: 1s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M7.5 6.5C7.5 8.981 9.519 11 12 11s4.5-2.019 4.5-4.5S14.481 2 12 2 7.5 4.019 7.5 6.5zM20 10H4l1.5 9h13L20 10z"/>
          </svg>
        </div>
        <div class="absolute top-1/2 right-20 w-7 h-7 text-accent/10 animate-bounce" style="animation-delay: 1.5s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M21,6H18V4A2,2 0 0,0 16,2H8A2,2 0 0,0 6,4V6H3A1,1 0 0,0 2,7V8A3,3 0 0,0 5,11H6.83L7.83,15.72C7.96,16.32 8.5,16.76 9.11,16.76H14.89C15.5,16.76 16.04,16.32 16.17,15.72L17.17,11H19A3,3 0 0,0 22,8V7A1,1 0 0,0 21,6M8,4H16V6H8V4M6.2,8H17.8L17,11H7L6.2,8Z"/>
          </svg>
        </div>
        
        <!-- Cat paw prints -->
        <div class="absolute top-32 right-32 w-7 h-7 text-accent/12 animate-pulse" style="animation-delay: 2s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        <div class="absolute bottom-32 left-32 w-6 h-6 text-accent/12 animate-bounce" style="animation-delay: 2.5s;">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <!-- Cat paw print SVG -->
            <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
            <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
            <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
          </svg>
        </div>
        
        {Array.from({ length: 20 }).map((_, i) => (
          <div 
            class="absolute w-2 h-2 bg-accent rounded-full animate-pulse-custom"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 2}s`,
              animationDuration: `${2 + Math.random() * 3}s`
            }}
          ></div>
        ))}
      </div>
      
      <!-- Formas geométricas -->
      <div class="absolute top-20 left-10 w-32 h-32 border-2 border-primary opacity-20 rotate-45 animate-spin" style="animation-duration: 20s;"></div>
      <div class="absolute bottom-20 right-10 w-24 h-24 border-2 border-secondary opacity-20 rounded-full animate-bounce" style="animation-duration: 3s;"></div>
      <div class="absolute top-1/2 left-1/4 w-16 h-16 border-2 border-accent opacity-20 rotate-12 animate-pulse"></div>
    </div>

    <!-- Contenido principal -->
    <main class="relative z-10 min-h-screen">
      <!-- Header del juego -->
      <header class="relative overflow-hidden pt-16">
        <!-- Imagen de fondo del hero -->
        <div class="absolute inset-0">
          <img 
            src={heroImage} 
            alt={`${game.name} background`}
            class="w-full h-full object-cover filter blur-sm"
          />
          <!-- Overlay oscuro suave -->
          <div class="absolute inset-0 bg-black/40"></div>
          <!-- Gradiente adicional -->
          <div class="absolute inset-0 bg-gradient-primary opacity-60"></div>
        </div>
        
        <!-- Contenido del header -->
        <div class="relative z-10 container mx-auto px-4 py-16">
          <div class="flex items-center justify-between mb-8">
            <a 
              href="/" 
              class="btn-secondary px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:scale-105"
            >
              ← Volver a Juegos
            </a>
          </div>
          
          <div class="flex items-center space-x-6 mb-8">
            <div class="w-24 h-24 rounded-xl overflow-hidden border-4 border-accent shadow-2xl">
              <img 
                src={gameIcon} 
                alt={`${game.name} icon`}
                class="w-full h-full object-cover"
              />
            </div>
            
            <div class="game-info-text" style={`color: ${dynamicStyles.textColors.primary} !important;`}>
              <h1 class="title-size font-bold font-game mb-2" style={`color: ${dynamicStyles.textColors.primary} !important;`}>{game.name}</h1>
              <p class="body-size opacity-90 max-w-2xl" style={`color: ${dynamicStyles.textColors.secondary} !important;`}>
                {game.description || `Únete a la comunidad de ${game.name} y comparte tus experiencias de juego.`}
              </p>
              
              {game.genre && (
                <div class="flex items-center space-x-2 mt-4">
                  <span class="px-3 py-1 bg-calico-orange-600/20 text-calico-orange-300 rounded-full text-sm font-medium">
                    {game.genre}
                  </span>
                  {game.platform && (
                    <span class="px-3 py-1 bg-calico-gray-600/20 text-calico-gray-300 rounded-full text-sm font-medium">
                      {game.platform}
                    </span>
                  )}
                </div>
              )}
            </div>
          </div>
          
          <!-- Estadísticas del juego -->
          {themeConfig.layout?.showStats && (
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
              <div class="glass-calico rounded-xl p-6 text-center text-calico-white">
                <div class="text-3xl font-bold text-calico-orange-500 mb-2">{gamePosts.length}</div>
                <div class="text-sm opacity-80 text-calico-gray-300">Posts Totales</div>
              </div>
              <div class="glass-calico rounded-xl p-6 text-center text-calico-white">
                <div class="text-3xl font-bold text-calico-orange-500 mb-2">
                  {new Set(gamePosts.map(post => post.user_id)).size}
                </div>
                <div class="text-sm opacity-80 text-calico-gray-300">Jugadores Activos</div>
              </div>
              <div class="glass-calico rounded-xl p-6 text-center text-calico-white">
                <div class="text-3xl font-bold text-calico-orange-500 mb-2">
                  {gamePosts.filter(post => {
                    const postDate = new Date(post.created_at);
                    const weekAgo = new Date();
                    weekAgo.setDate(weekAgo.getDate() - 7);
                    return postDate > weekAgo;
                  }).length}
                </div>
                <div class="text-sm opacity-80 text-calico-gray-300">Posts Esta Semana</div>
              </div>
            </div>
          )}
        </div>
      </header>

      <!-- Sección de posts -->
      <section class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <!-- Formulario para crear post -->
          <div class="mb-12" id="post-form-container">
            <div class="glass-calico-dark rounded-2xl p-8">
              <h2 class="text-2xl font-bold text-calico-white mb-6 font-game">
                Comparte tu experiencia en {game.name}
              </h2>
              <PostForm 
                client:load
                gameId={game.id}
                placeholder={`¿Qué está pasando en ${game.name}?`}
                showNameField={false}
              />
            </div>
          </div>
          
          <!-- Lista de posts -->
          <div class="space-y-8">
            <div class="flex items-center justify-between">
              <h2 class="text-3xl font-bold text-calico-white font-game">
                Últimas publicaciones
              </h2>
              <div class="text-calico-orange-500 font-medium">
                {gamePosts.length} {gamePosts.length === 1 ? 'post' : 'posts'}
              </div>
            </div>
            
            <PostsList 
              client:load
              initialPosts={gamePosts}
              gameId={game.id}
              currentUserId={currentUser?.id}
              emptyMessage={`No hay publicaciones en ${game.name} aún. Comparte tu experiencia y sé el primero.`}
            />
          </div>
        </div>
      </section>
    </main>
  </ThemeProvider>
</Layout>

<script>
  // Función para verificar autenticación del cliente
  function checkClientAuth() {
    const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
    return userSession ? JSON.parse(userSession) : null;
  }

  // Función para cargar posts desde localStorage
  function loadLocalStoragePosts() {
    const gameName = document.querySelector('h1')?.textContent?.trim() || 'general';
    const storageKey = `posts_${gameName}`;
    const posts = JSON.parse(localStorage.getItem(storageKey) || '[]');
    
    return posts.sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
  }

  // Función para crear elemento de post
  function createPostElement(post: any) {
    const timeAgo = formatTimeAgo(post.timestamp);
    const authorInitial = post.author.charAt(0).toUpperCase();
    
    return `
      <div class="bg-white/10 backdrop-blur-md rounded-xl p-6 shadow-lg post-card transform transition-all duration-300 hover:scale-[1.02]" data-post-id="${post.id}">
        <div class="flex items-center mb-4">
          <div class="w-10 h-10 bg-gradient-to-br from-calico-orange-400 to-calico-orange-600 rounded-full flex items-center justify-center text-calico-white font-bold text-sm">
            ${authorInitial}
          </div>
          <div class="ml-3 flex-1">
            <div class="flex items-center gap-2">
              <h3 class="font-semibold text-calico-white">${post.author}</h3>
            </div>
            <div class="flex items-center gap-2 text-sm text-calico-gray-400">
              <span>${timeAgo}</span>
            </div>
          </div>
        </div>
        <div class="mb-4">
          <p class="text-calico-gray-200 leading-relaxed whitespace-pre-wrap">${post.content}</p>
        </div>
        <div class="flex items-center justify-between pt-4 border-t border-white/10">
          <div class="flex items-center space-x-6">
            <button class="flex items-center space-x-2 text-calico-gray-400 hover:text-red-400 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
              <span>${post.likes || 0}</span>
            </button>
            <button class="flex items-center space-x-2 text-calico-gray-400 hover:text-blue-400 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
              <span>${post.comments || 0}</span>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  // Función para formatear tiempo
  function formatTimeAgo(timestamp: any) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) {
      return 'Hace unos minutos';
    } else if (diffInHours < 24) {
      return `Hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      if (diffInDays < 7) {
        return `Hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;
      } else {
        return date.toLocaleDateString('es-ES');
      }
    }
  }

  // Función para actualizar la lista de posts
  function updatePostsList() {
    const posts = loadLocalStoragePosts();
    const postsContainer = document.querySelector('.grid.gap-8');
    const emptyState = document.querySelector('.text-center.py-16');
    const postCount = document.querySelector('.text-accent.font-medium');
    
    if (posts.length > 0) {
      if (postsContainer) {
        postsContainer.innerHTML = posts.map((post: any) => createPostElement(post)).join('');
        (postsContainer as HTMLElement).style.display = 'grid';
      }
      if (emptyState) {
        (emptyState as HTMLElement).style.display = 'none';
      }
      if (postCount) {
        postCount.textContent = `${posts.length} ${posts.length === 1 ? 'post' : 'posts'}`;
      }
    } else {
      if (postsContainer) {
        (postsContainer as HTMLElement).style.display = 'none';
      }
      if (emptyState) {
        (emptyState as HTMLElement).style.display = 'block';
      }
      if (postCount) {
        postCount.textContent = '0 posts';
      }
    }
  }

  // Función para actualizar UI basada en autenticación
  function updateAuthUI() {
    const session = checkClientAuth();
    const postFormContainer = document.getElementById('post-form-container');
    const loginPrompt = document.getElementById('login-prompt');
    
    if (session && session.user) {
      // Usuario autenticado: mostrar formulario
      if (postFormContainer) {
        postFormContainer.style.display = 'block';
      }
      if (loginPrompt) {
        loginPrompt.style.display = 'none';
      }
    } else {
      // Usuario no autenticado: ocultar formulario y mostrar prompt de login
      if (postFormContainer) {
        postFormContainer.style.display = 'none';
      }
      if (loginPrompt) {
        loginPrompt.style.display = 'block';
      }
    }
  }

  // Animaciones adicionales y efectos interactivos
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar autenticación al cargar la página
    updateAuthUI();
    
    // Cargar posts desde localStorage
    updatePostsList();
    
    // Escuchar cambios en el storage (para cuando el usuario se loguee/desloguee)
    window.addEventListener('storage', updateAuthUI);
    
    // Escuchar eventos de nuevos posts
    window.addEventListener('postAdded', () => {
      updatePostsList();
    });
    
    // Escuchar cambios en localStorage para posts
    window.addEventListener('storage', (e) => {
      if (e.key && e.key.startsWith('posts_')) {
        updatePostsList();
      }
    });
    
    // Efecto parallax suave en el header
    const header = document.querySelector('header');
    const handleScroll = () => {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.5;
      if (header) {
        header.style.transform = `translateY(${rate}px)`;
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    
    // Animación de entrada para las tarjetas
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.opacity = '1';
          (entry.target as HTMLElement).style.transform = 'translateY(0)';
        }
      });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.transform').forEach((el) => {
      (el as HTMLElement).style.opacity = '0';
      (el as HTMLElement).style.transform = 'translateY(20px)';
      (el as HTMLElement).style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });
  });
</script>