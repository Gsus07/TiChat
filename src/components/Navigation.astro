---
// src/components/Navigation.astro
---

<!-- Navigation Bar -->
<nav id="navbar" class="fixed top-0 left-0 right-0 z-50 bg-slate-900/95 backdrop-blur-md border-b border-white/10 transition-all duration-300">
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
		<div class="flex items-center justify-between h-16">
			<!-- Logo -->
			<div class="flex items-center">
				<a href="/" class="flex items-center space-x-2 text-white hover:text-purple-300 transition-colors">
					<div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center">
						<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
					<span class="font-bold text-lg">Gaming Hub</span>
				</a>
			</div>

			<!-- Navigation Links -->
			<div class="hidden md:block">
				<div class="ml-10 flex items-baseline space-x-4">
					<a href="/" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Inicio</a>
					<a href="/minecraft" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Minecraft</a>
					<a href="/call-of-duty" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Call of Duty</a>
        <a href="/among-us" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Among Us</a>
					<a href="/uno" class="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">UNO</a>
				</div>
			</div>

			<!-- User Menu -->
			<div class="flex items-center space-x-4">
				<!-- Guest buttons -->
				<div id="guestButtons" class="flex items-center space-x-3">
					<a href="/login" class="text-gray-300 hover:text-white px-3 py-2 text-sm font-medium transition-colors">Iniciar Sesión</a>
					<a href="/register" class="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 transform hover:scale-105">Registrarse</a>
				</div>

				<!-- User menu (hidden by default) -->
				<div id="userMenu" class="hidden relative">
					<button id="userMenuButton" class="flex items-center space-x-2 text-gray-300 hover:text-white transition-colors">
						<img id="userAvatar" src="/default-avatar.png" alt="Avatar" class="w-8 h-8 rounded-full border-2 border-purple-500">
						<span id="userName" class="text-sm font-medium">Usuario</span>
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
						</svg>
					</button>

					<!-- Dropdown menu -->
					<div id="userDropdown" class="hidden absolute right-0 mt-2 w-48 bg-slate-800/95 backdrop-blur-md rounded-lg shadow-lg border border-white/10 py-1">
						<a href="/profile" class="block px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-white/10 transition-colors">
							<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
							</svg>
							Perfil
						</a>
						<a href="#" class="block px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-white/10 transition-colors">
							<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>
							Configuraciones
						</a>
						<hr class="my-1 border-white/10">
						<button id="logoutButton" class="block w-full text-left px-4 py-2 text-sm text-red-400 hover:text-red-300 hover:bg-red-500/10 transition-colors">
							<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
							</svg>
							Cerrar Sesión
						</button>
					</div>
				</div>

				<!-- Mobile menu button -->
				<button id="mobileMenuButton" class="md:hidden text-gray-300 hover:text-white">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
					</svg>
				</button>
			</div>
		</div>
	</div>

	<!-- Mobile menu -->
	<div id="mobileMenu" class="hidden md:hidden bg-slate-800/95 backdrop-blur-md border-t border-white/10">
		<div class="px-2 pt-2 pb-3 space-y-1">
			<a href="/" class="text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Inicio</a>
			<a href="/minecraft" class="text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Minecraft</a>
			<a href="/call-of-duty" class="text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Call of Duty</a>
        <a href="/among-us" class="text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Among Us</a>
			<a href="/uno" class="text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">UNO</a>
		</div>
	</div>
</nav>

<script>
	// Global variables to track event listeners
	let navigationInitialized = false;
	let eventListenersAdded = false;
	let cleanupFunctions: (() => void)[] = [];

	// Check authentication status
	function checkAuthStatus() {
		const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
		const guestButtons = document.getElementById('guestButtons');
		const userMenu = document.getElementById('userMenu');
		const userAvatar = document.getElementById('userAvatar');
		const userName = document.getElementById('userName');

		if (userSession) {
			try {
				const session = JSON.parse(userSession);
				const user = session.user;

				// Show user menu, hide guest buttons
				if (guestButtons) guestButtons.classList.add('hidden');
				if (userMenu) userMenu.classList.remove('hidden');

				// Update user info
				if (userName) userName.textContent = user.name;
				if (userAvatar && userAvatar instanceof HTMLImageElement) userAvatar.src = user.avatar || '/default-avatar.png';
			} catch (error) {
				console.error('Error parsing user session:', error);
				// Clear invalid session
				localStorage.removeItem('userSession');
				sessionStorage.removeItem('userSession');
				// Recheck after clearing
				if (guestButtons) guestButtons.classList.remove('hidden');
				if (userMenu) userMenu.classList.add('hidden');
			}
		} else {
			// Show guest buttons, hide user menu
			if (guestButtons) guestButtons.classList.remove('hidden');
			if (userMenu) userMenu.classList.add('hidden');
		}
	}

	// Clean up previous event listeners
	function cleanup() {
		cleanupFunctions.forEach((fn: () => void) => fn());
		cleanupFunctions = [];
		navigationInitialized = false;
	}

	// Initialize navigation functionality
	function initNavigation() {
		if (navigationInitialized) return;
		navigationInitialized = true;

		// User menu dropdown toggle
		const userMenuButton = document.getElementById('userMenuButton');
		const userDropdown = document.getElementById('userDropdown');

		if (userMenuButton && userDropdown) {
			const handleUserMenuClick = (e: Event) => {
				e.stopPropagation();
				userDropdown.classList.toggle('hidden');
			};
			userMenuButton.addEventListener('click', handleUserMenuClick);
			cleanupFunctions.push(() => userMenuButton.removeEventListener('click', handleUserMenuClick));
		}

		// Close dropdown when clicking outside
		const handleDocumentClick = () => {
			if (userDropdown) userDropdown.classList.add('hidden');
		};
		document.addEventListener('click', handleDocumentClick);
		cleanupFunctions.push(() => document.removeEventListener('click', handleDocumentClick));

		// Mobile menu toggle
		const mobileMenuButton = document.getElementById('mobileMenuButton');
		const mobileMenu = document.getElementById('mobileMenu');

		if (mobileMenuButton && mobileMenu) {
			const handleMobileMenuClick = () => {
				mobileMenu.classList.toggle('hidden');
			};
			mobileMenuButton.addEventListener('click', handleMobileMenuClick);
			cleanupFunctions.push(() => mobileMenuButton.removeEventListener('click', handleMobileMenuClick));
		}

		// Logout functionality
		const logoutButton = document.getElementById('logoutButton');
		if (logoutButton) {
			const handleLogout = () => {
				// Clear session data
				localStorage.removeItem('userSession');
				sessionStorage.removeItem('userSession');

				// Show notification using custom event
				window.dispatchEvent(new CustomEvent('addNotification', {
					detail: { message: 'Sesión cerrada exitosamente', type: 'success' }
				}));

				// Redirect to home
				setTimeout(() => {
					window.location.href = '/';
				}, 1000);
			};
			logoutButton.addEventListener('click', handleLogout);
			cleanupFunctions.push(() => logoutButton.removeEventListener('click', handleLogout));
		}
	}

	// Notification function is now handled by the global NotificationProvider

	// Main initialization function
	function initializeAuth() {
		checkAuthStatus();
		initNavigation();
	}

	// Initialize everything when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeAuth);
	} else {
		initializeAuth();
	}

	// Listen for Astro page transitions
	if (!eventListenersAdded) {
		eventListenersAdded = true;
		
		// Listen for astro:before-preparation (before navigation starts)
		document.addEventListener('astro:before-preparation', () => {
			cleanup();
		});
		
		// Listen for astro:page-load event (after navigation)
		document.addEventListener('astro:page-load', () => {
			// Reinitialize authentication with a small delay
			setTimeout(initializeAuth, 50);
		});

		// Listen for storage changes (for cross-tab logout)
		const handleStorageChange = (e: StorageEvent) => {
			if (e.key === 'userSession' && !e.newValue) {
				checkAuthStatus();
			}
		};
		window.addEventListener('storage', handleStorageChange);
		cleanupFunctions.push(() => window.removeEventListener('storage', handleStorageChange));
	}
</script>