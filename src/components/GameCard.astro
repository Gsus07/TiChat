---
// src/components/GameCard.astro
import type { Game } from '../utils/games';
import { isGameFavorite } from '../utils/favorites';
import { supabase } from '../utils/supabaseClient';

export interface Props {
  game: Game;
  userId?: string;
}

const { game, userId } = Astro.props;

// Verificar que el juego existe
if (!game || !game.id) {
  throw new Error('GameCard: game prop is required and must have an id');
}

// Verificar si el juego está en favoritos del usuario
let isFavorite = false;
if (userId) {
  const { data } = await isGameFavorite(userId, game.id);
  isFavorite = data || false;
}

// Obtener conteo de servidores activos para este juego
const { count: serverCount } = await supabase
  .from('game_servers')
  .select('id', { count: 'exact', head: true })
  .eq('game_id', game.id)
  .eq('is_active', true);

// Obtener conteo de posts para este juego
const { count: postCount } = await supabase
  .from('posts')
  .select('id', { count: 'exact', head: true })
  .eq('game_id', game.id)
  .eq('is_active', true);
---
<div class="block group relative" data-game-id={game.id}>
  <!-- Decorative cat paw prints around the card -->
  <div class="absolute -top-3 -left-3 w-6 h-6 text-calico-orange-400/30 opacity-0 group-hover:opacity-100 transition-all duration-500 animate-pulse">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <!-- Cat paw print SVG -->
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  <div class="absolute -top-3 -right-3 w-6 h-6 text-calico-gray-400/30 opacity-0 group-hover:opacity-100 transition-all duration-500 animate-bounce">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <!-- Cat paw print SVG -->
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  <div class="absolute -bottom-3 -left-3 w-5 h-5 text-calico-orange-300/25 opacity-0 group-hover:opacity-100 transition-all duration-700 animate-pulse" style="animation-delay: 0.5s;">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <!-- Cat paw print SVG -->
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  <div class="absolute -bottom-3 -right-3 w-5 h-5 text-calico-gray-300/25 opacity-0 group-hover:opacity-100 transition-all duration-700 animate-bounce" style="animation-delay: 0.7s;">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <!-- Cat paw print SVG -->
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  
  <!-- Glow effect background -->
  <div class="absolute -inset-1 bg-gradient-to-r from-calico-orange-600 to-calico-orange-500 rounded-2xl blur opacity-0 group-hover:opacity-75 transition duration-500"></div>
  
  <!-- Main card with proper link structure -->
  <a href={`/game/${game.id}`} class="relative glass-calico rounded-2xl overflow-hidden shadow-xl transition-transform duration-500 hover:scale-[1.02] hover-glow-orange border border-calico-gray-200/50 group-hover:border-calico-orange-500/50 h-auto min-h-[360px] sm:min-h-[420px] lg:min-h-[450px] w-full max-w-sm mx-auto flex flex-col focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-calico-orange-300">
    <!-- Image container with overlay effects -->
    <div class="relative h-56 sm:h-60 md:h-64 lg:h-72 overflow-hidden flex-shrink-0">
      <img 
        src={game.cover_image_url || '/tina-logo.png'} 
        alt={game.name}
        class="w-full h-full object-cover transition-all duration-700 group-hover:scale-110 group-hover:brightness-110"
        onerror="this.src='/tina-logo.png'"
      />
      <!-- Gradient overlay -->
      <div class="absolute inset-0 bg-gradient-to-t from-slate-900/80 via-transparent to-transparent opacity-60 group-hover:opacity-40 transition-opacity duration-500"></div>
      
      <!-- Favorite button -->
      {userId && (
        <button 
          class="favorite-btn absolute top-2 right-2 sm:top-4 sm:right-4 w-8 h-8 sm:w-12 sm:h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center transition-all duration-500 hover:bg-white/30 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-calico-orange-400"
          data-game-id={game.id}
          data-is-favorite={isFavorite}
          aria-label="Alternar favorito"
        >
          <svg class={`w-4 h-4 sm:w-6 sm:h-6 transition-colors duration-300 ${isFavorite ? 'text-red-500 fill-current' : 'text-white'}`} fill={isFavorite ? 'currentColor' : 'none'} stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
        </button>
      )}
      
      <!-- Game stats overlay -->
      <div class="absolute bottom-2 left-2 sm:bottom-4 sm:left-4 flex gap-1 sm:gap-3">
        <!-- Server count -->
        {serverCount && serverCount > 0 && (
          <div class="bg-green-500/20 backdrop-blur-sm px-2 py-1 sm:px-3 sm:py-1.5 rounded-full border border-green-500/30">
            <span class="text-green-300 text-xs sm:text-sm font-medium flex items-center gap-1">
              <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path>
              </svg>
              <span class="hidden sm:inline">{serverCount} servidor{serverCount !== 1 ? 'es' : ''}</span>
              <span class="sm:hidden">{serverCount}</span>
            </span>
          </div>
        )}
        
        <!-- Post count -->
        {postCount && postCount > 0 && (
          <div class="bg-blue-500/20 backdrop-blur-sm px-2 py-1 sm:px-3 sm:py-1.5 rounded-full border border-blue-500/30">
            <span class="text-blue-300 text-xs sm:text-sm font-medium flex items-center gap-1">
              <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
              </svg>
              <span class="hidden sm:inline">{postCount} post{postCount !== 1 ? 's' : ''}</span>
              <span class="sm:hidden">{postCount}</span>
            </span>
          </div>
        )}
      </div>
      
      <!-- Shimmer effect -->
      <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full transition-transform duration-1000 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12"></div>
    </div>
    
    <!-- Content section -->
    <div class="p-5 sm:p-6 md:p-7 relative flex-grow flex flex-col justify-between bg-white/90">
      <div class="flex-grow">
        <!-- Title with gradient -->
        <h2 class="text-xl sm:text-2xl md:text-3xl font-heading font-bold mb-4 text-gray-800 group-hover:text-calico-orange-600 transition-all duration-500 line-clamp-2">
          {game.name}
        </h2>
        
        <!-- Description -->
        <p class="text-gray-600 group-hover:text-gray-700 transition-colors duration-300 leading-relaxed text-base sm:text-lg mb-5 line-clamp-3">
          {game.description || 'Explora este increíble juego y únete a la comunidad.'}
        </p>
      </div>
      
      <div class="mt-auto">
        <!-- Game info grid -->
        <div class="grid grid-cols-3 gap-2 sm:gap-3 pt-4 border-t border-calico-gray-200 mb-4">
          <!-- Genre -->
          <div class="text-center">
            <div class="text-xs text-gray-500 uppercase tracking-wider mb-1">Género</div>
            <div class="text-xs sm:text-sm text-gray-700 font-medium truncate">{game.genre}</div>
          </div>
          
          <!-- Platform -->
          <div class="text-center">
            <div class="text-xs text-gray-500 uppercase tracking-wider mb-1">Plataforma</div>
            <div class="text-xs sm:text-sm text-gray-700 font-medium truncate">{game.platform}</div>
          </div>
          
          <!-- Release Date -->
          <div class="text-center">
            <div class="text-xs text-gray-500 uppercase tracking-wider mb-1">Lanzamiento</div>
            <div class="text-xs sm:text-sm text-gray-700 font-medium">
              {game.release_date ? new Date(game.release_date).getFullYear() : 'N/A'}
            </div>
          </div>
        </div>
        
        <!-- Action buttons -->
        <div class="flex items-center justify-between">
          <span class="flex items-center text-calico-orange-600 group-hover:text-calico-orange-700 transition-colors duration-300">
            <span class="text-sm font-medium">Explorar</span>
            <svg class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </span>
        </div>
      </div>
      
      <!-- Decorative elements -->
      <div class="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left"></div>
    </a>
    
    <!-- Action buttons positioned outside the main link to prevent interference -->
    <div class="absolute top-2 right-2 sm:top-4 sm:right-4 flex gap-2 z-50 pointer-events-auto">
      <!-- Botón de editar -->
      <button 
        class="edit-game-btn bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-lg transition-all duration-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
        data-game-id={game.id}
        data-game-name={game.name}
        data-game-description={game.description}
        data-game-genre={game.genre}
        data-game-platform={game.platform}
        data-game-image={game.cover_image_url}
        data-game-servers={game.has_servers}
        title="Editar juego"
        style="display: none;"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
        </svg>
      </button>
      
      <!-- Botón de eliminar -->
      <button 
        class="delete-game-btn bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg transition-all duration-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
        data-game-id={game.id}
        data-game-name={game.name}
        title="Eliminar juego"
        style="display: none;"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      </button>
    </div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Manejar favoritos
    const favoriteButtons = document.querySelectorAll('.favorite-btn');
    
    favoriteButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const gameId = (button as HTMLElement).dataset.gameId;
        const isFavorite = (button as HTMLElement).dataset.isFavorite === 'true';
        
        try {
          // Verificar autenticación usando el sistema del proyecto
          const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
          if (!userSession) {
            alert('Debes iniciar sesión para agregar favoritos');
            return;
          }

          let session;
          try {
            session = JSON.parse(userSession);
          } catch (error) {
            alert('Debes iniciar sesión para agregar favoritos');
            return;
          }

          if (!session.user || !session.access_token) {
            alert('Debes iniciar sesión para agregar favoritos');
            return;
          }
          
          const response = await fetch(`/api/games/${gameId}/favorite`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            const result = await response.json();
            const svg = button.querySelector('svg');
            
            if (svg && result.is_favorite) {
              svg.classList.add('text-red-500', 'fill-current');
              svg.classList.remove('text-white');
              svg.setAttribute('fill', 'currentColor');
              (button as HTMLElement).dataset.isFavorite = 'true';
            } else if (svg) {
              svg.classList.remove('text-red-500', 'fill-current');
              svg.classList.add('text-white');
              svg.setAttribute('fill', 'none');
              (button as HTMLElement).dataset.isFavorite = 'false';
            }
          }
        } catch (error) {
          // Error toggling favorite
        }
      });
    });
    
    // Manejar edición de juegos
    const editButtons = document.querySelectorAll('.edit-game-btn');
    editButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        const gameData = {
          id: (button as HTMLElement).dataset.gameId,
          name: (button as HTMLElement).dataset.gameName,
          description: (button as HTMLElement).dataset.gameDescription,
          genre: (button as HTMLElement).dataset.gameGenre,
          platform: (button as HTMLElement).dataset.gamePlatform,
          cover_image_url: (button as HTMLElement).dataset.gameImage,
          has_servers: (button as HTMLElement).dataset.gameServers === 'true'
        };
        
        // Disparar evento personalizado para abrir modal de edición
        const editEvent = new CustomEvent('openEditGameModal', {
          detail: gameData
        });
        window.dispatchEvent(editEvent);
      });
    });
    
    // Manejar eliminación de juegos
    const deleteButtons = document.querySelectorAll('.delete-game-btn');
    deleteButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        const gameId = (button as HTMLElement).dataset.gameId;
        const gameName = (button as HTMLElement).dataset.gameName;
        
        if (!confirm(`¿Estás seguro de que quieres eliminar el juego "${gameName}"? Esta acción no se puede deshacer.`)) {
          return;
        }
        
        try {
          // Verificar autenticación usando el sistema del proyecto
          const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
          if (!userSession) {
            alert('Debes iniciar sesión para eliminar juegos');
            return;
          }

          let session;
          try {
            session = JSON.parse(userSession);
          } catch (error) {
            alert('Debes iniciar sesión para eliminar juegos');
            return;
          }

          if (!session.user || !session.access_token) {
            alert('Debes iniciar sesión para eliminar juegos');
            return;
          }
          
          const response = await fetch(`/api/games?id=${gameId}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            // Recargar la página para actualizar la lista de juegos
            window.location.reload();
          } else {
            const error = await response.json();
            alert(`Error al eliminar el juego: ${error.error}`);
          }
        } catch (error) {
          alert('Error al eliminar el juego');
        }
      });
    });
  });
</script>
  
  <!-- Close outer card container -->
</div>