---
import Layout from '../layouts/Layout.astro';
import ThemeProvider from './ThemeProvider.astro';
import PostForm from './react/PostForm.tsx';
import PostsList from './react/PostsList.tsx';
import CreateServerForm from './CreateServerForm.tsx';
import EditServerForm from './EditServerForm.tsx';
import ServerCard from './ServerCard.astro';
import { getServersByGameId } from '../utils/games';
import { getPostsByGameId } from '../utils/posts';
import { getCurrentUser } from '../utils/auth';
import { getDynamicTextStyles } from '../utils/colorAnalysis';
import type { Game, GameServer, ThemeConfig } from '../utils/games';

interface Props {
  game: Game;
  themeConfig: ThemeConfig;
}

const { game, themeConfig } = Astro.props;

// Obtener usuario actual
const currentUser = await getCurrentUser(Astro.request);

// Obtener servidores del juego
const { data: servers, error: serversError } = await getServersByGameId(game.id);

if (serversError) {
  // Error fetching servers
}

const gameServers = servers || [];

// Obtener posts del juego
const { data: posts, error: postsError } = await getPostsByGameId(game.id);

if (postsError) {
  // Error fetching posts
}

const gamePosts = posts || [];
const featuredServers = gameServers.filter(server => server.is_featured);
const regularServers = gameServers.filter(server => !server.is_featured);

// Configurar imágenes desde el juego
const heroImage = game.cover_image_url || themeConfig.images?.hero || 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=1200&h=600&fit=crop';
const gameIcon = game.cover_image_url || themeConfig.images?.icon || '/favicon.svg';

// Obtener estilos dinámicos de texto basados en la imagen y el nombre del juego
const dynamicStyles = await getDynamicTextStyles(heroImage, game.name);
---

<Layout title={`${game.name} - Servidores | Gaming Community`}>
  <ThemeProvider themeConfig={themeConfig}>
    <!-- Fondo animado personalizado -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none">
      <div class="absolute inset-0 bg-gradient-game opacity-90"></div>
      
      <!-- Partículas animadas -->
      <div class="absolute inset-0">
        {Array.from({ length: 25 }).map((_, i) => (
          <div 
            class="absolute w-1 h-1 bg-accent rounded-full animate-pulse-custom"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${3 + Math.random() * 4}s`
            }}
          ></div>
        ))}
      </div>
      
      <!-- Elementos geométricos -->
      <div class="absolute top-32 left-16 w-40 h-40 border border-primary opacity-10 rotate-45 animate-spin" style="animation-duration: 30s;"></div>
      <div class="absolute bottom-32 right-16 w-28 h-28 border border-secondary opacity-10 rounded-full animate-bounce" style="animation-duration: 4s;"></div>
      <div class="absolute top-2/3 left-1/3 w-20 h-20 border border-accent opacity-10 rotate-12 animate-pulse"></div>
    </div>

    <!-- Contenido principal -->
    <main class="relative z-10 min-h-screen">
      <!-- Header del juego -->
      <header class="relative overflow-hidden pt-16">
        <!-- Imagen de fondo del hero -->
        <div class="absolute inset-0">
          <img 
            src={heroImage} 
            alt={`${game.name} background`}
            class="w-full h-full object-cover filter blur-sm"
          />
          <!-- Overlay oscuro suave -->
          <div class="absolute inset-0 bg-black/40"></div>
          <!-- Gradiente adicional -->
          <div class="absolute inset-0 bg-gradient-primary opacity-60"></div>
        </div>
        
        <!-- Contenido del header -->
        <div class="relative z-10 container mx-auto px-4 py-16">
          <div class="flex items-center justify-between mb-8">
            <a 
              href="/" 
              class="btn-secondary px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:scale-105"
            >
              ← Volver a Juegos
            </a>
          </div>
          
          <div class="flex items-center space-x-6 mb-8">
            <div class="w-24 h-24 rounded-xl overflow-hidden border-4 border-accent shadow-2xl">
              <img 
                src={gameIcon} 
                alt={`${game.name} icon`}
                class="w-full h-full object-cover"
              />
            </div>
            
            <!-- DEBUG: Primary color: {dynamicStyles.textColors.primary}, High contrast: {dynamicStyles.isHighContrast} -->
            <div 
              id="game-info-text" 
              class="transition-colors duration-500 p-4 rounded-lg"
              style={`color: ${dynamicStyles.textColors.primary} !important; ${dynamicStyles.isHighContrast ? 'background: linear-gradient(135deg, rgba(0, 0, 0, 0.85) 0%, rgba(0, 0, 0, 0.75) 100%); text-shadow: 0 2px 8px rgba(0, 0, 0, 0.9), 0 0 4px rgba(0, 0, 0, 0.8); -webkit-text-stroke: 1px rgba(0, 0, 0, 0.8); backdrop-filter: blur(2px);' : dynamicStyles.isLightBackground ? 'text-shadow: 0 1px 3px rgba(255, 255, 255, 0.8); -webkit-text-stroke: 0.5px rgba(0, 0, 0, 0.3);' : 'text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8); -webkit-text-stroke: 0.5px rgba(255, 255, 255, 0.3);'}`}
            >
              <h1 class="title-size font-bold font-game mb-2">{game.name}</h1>
              <p class="body-size opacity-90 max-w-2xl" style={`color: ${dynamicStyles.textColors.secondary} !important; ${dynamicStyles.isHighContrast ? 'text-shadow: 0 2px 6px rgba(0, 0, 0, 0.9), 0 0 3px rgba(0, 0, 0, 0.7); -webkit-text-stroke: 0.8px rgba(0, 0, 0, 0.7);' : dynamicStyles.isLightBackground ? '-webkit-text-stroke: 0.3px rgba(0, 0, 0, 0.2);' : '-webkit-text-stroke: 0.3px rgba(255, 255, 255, 0.2);'}`}>
                {game.description || `Explora los diferentes servidores de ${game.name} y encuentra tu comunidad perfecta.`}
              </p>
              
              {game.genre && (
                <div class="flex items-center space-x-2 mt-4">
                  <span class="px-3 py-1 bg-accent rounded-full text-sm font-medium">
                    {game.genre}
                  </span>
                  {game.platform && (
                    <span class="px-3 py-1 bg-calico-gray rounded-full text-sm font-medium">
                      {game.platform}
                    </span>
                  )}
                </div>
              )}
            </div>
          </div>
          
          <!-- Estadísticas del juego -->
          {themeConfig.layout?.showStats && (
             <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mt-8">
               <div class="glass rounded-xl p-6 text-center text-calico-white">
                 <div class="text-3xl font-bold text-calico-orange-500 mb-2">{gameServers.length}</div>
                 <div class="text-sm opacity-80">Servidores Activos</div>
               </div>
               <div class="glass rounded-xl p-6 text-center text-calico-white">
                 <div class="text-3xl font-bold text-calico-orange-500 mb-2">{featuredServers.length}</div>
                 <div class="text-sm opacity-80">Servidores Destacados</div>
               </div>
               <div class="glass rounded-xl p-6 text-center text-calico-white">
                 <div class="text-3xl font-bold text-calico-orange-500 mb-2">
                   {gameServers.reduce((total, server) => total + server.max_players, 0)}
                 </div>
                 <div class="text-sm opacity-80">Capacidad Total</div>
               </div>
               <div class="glass rounded-xl p-6 text-center text-calico-white">
                 <div class="text-3xl font-bold text-calico-orange-500 mb-2">
                   {new Set(gameServers.map(server => server.server_type)).size}
                 </div>
                 <div class="text-sm opacity-80">Tipos de Servidor</div>
               </div>
             </div>
           )}
        </div>
      </header>

      <!-- Sección de servidores -->
      <section class="container mx-auto px-4 py-12">
        <div class="max-w-7xl mx-auto">
          
          <!-- Servidores destacados -->
          {featuredServers.length > 0 && (
            <div class="mb-16">
              <div class="flex items-center justify-between mb-8">
                <h2 class="text-3xl font-bold text-calico-white font-game flex items-center">
                  <svg class="w-8 h-8 text-calico-orange-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                  </svg>
                  Servidores Destacados
                </h2>
                <div class="glass-calico backdrop-blur-sm rounded-xl px-4 py-2 border border-yellow-500/30 bg-yellow-500/10">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                    <span class="text-yellow-400 font-semibold text-sm">
                      {featuredServers.length} {featuredServers.length === 1 ? 'servidor' : 'servidores'}
                    </span>
                  </div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {featuredServers.map((server) => {
                  // Mapear propiedades del servidor para ServerCard
                  const mappedServer = {
                    id: server.id,
                    name: server.name,
                    description: server.description || '',
                    image_url: server.image || `/icons/${server.server_type}.svg`,
                    ip_address: server.server_ip || '',
                    port: server.server_port || 25565,
                    version: server.server_version || '',
                    game_id: server.game_id,
                    is_active: server.is_active,
                    created_by: server.owner_id || ''
                  };
                  
                  return (
                    <ServerCard 
                      server={mappedServer} 
                      currentUserId={currentUser?.id || ''} 
                    />
                  );
                })}
              </div>
            </div>
          )}
          
          <!-- Todos los servidores -->
          <div class="mb-16">
            <div class="flex items-center justify-between mb-8">
              <h2 class="text-3xl font-bold text-calico-white font-game">
                {featuredServers.length > 0 ? 'Todos los Servidores' : 'Servidores Disponibles'}
              </h2>
              <div class="flex items-center gap-4">
                <div class="glass-calico backdrop-blur-sm rounded-xl px-4 py-2 border border-calico-orange-500/30 bg-calico-orange-500/10">
                  <div class="flex items-center gap-2">
                    <div class="w-2 h-2 bg-calico-orange-500 rounded-full animate-pulse"></div>
                    <span class="text-calico-orange-400 font-semibold text-sm">
                      {gameServers.length} {gameServers.length === 1 ? 'servidor' : 'servidores'}
                    </span>
                  </div>
                </div>
                <button id="show-create-form-header" class="group relative overflow-hidden bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 hover:from-calico-orange-600 hover:to-calico-orange-700 text-calico-white px-6 py-3 rounded-xl font-semibold flex items-center gap-2 transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-calico-orange-500/25 border border-calico-orange-400/30">
                  <!-- Glow effect -->
                  <div class="absolute inset-0 bg-gradient-to-r from-calico-orange-400 to-calico-orange-500 opacity-0 group-hover:opacity-20 transition-opacity duration-300 rounded-xl"></div>
                  <!-- Shimmer effect -->
                  <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full transition-transform duration-700 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12"></div>
                  <svg class="w-5 h-5 relative z-10 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                  <span class="relative z-10">Añadir Servidor</span>
                </button>
              </div>
            </div>
            
            {gameServers.length > 0 ? (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {gameServers.map((server) => {
                  // Mapear propiedades del servidor para ServerCard
                  const mappedServer = {
                    id: server.id,
                    name: server.name,
                    description: server.description || '',
                    image_url: server.image || `/icons/${server.server_type}.svg`,
                    ip_address: server.server_ip || '',
                    port: server.server_port || 25565,
                    version: server.server_version || '',
                    game_id: server.game_id,
                    is_active: server.is_active,
                    created_by: server.owner_id || ''
                  };
                  
                  return (
                    <ServerCard 
                      server={mappedServer} 
                      currentUserId={currentUser?.id || ''} 
                    />
                  );
                })}
              </div>
            ) : (
              <div class="text-center py-16">
                <div class="glass-calico backdrop-blur-xl rounded-3xl p-12 max-w-lg mx-auto border border-calico-orange-500/20 relative overflow-hidden">
                  <!-- Background glow effect -->
                  <div class="absolute inset-0 bg-gradient-to-br from-calico-orange-500/5 to-yellow-500/5 rounded-3xl"></div>
                  
                  <!-- Animated icon container -->
                  <div class="relative w-24 h-24 mx-auto mb-8 rounded-full bg-gradient-to-br from-calico-orange-500 to-yellow-500 flex items-center justify-center shadow-2xl shadow-calico-orange-500/25 animate-pulse">
                    <svg class="w-12 h-12 text-calico-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"></path>
                    </svg>
                  </div>
                  
                  <h3 class="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-calico-white to-calico-gray-300 mb-4 font-game">
                    No hay servidores disponibles
                  </h3>
                  <p class="text-calico-gray-300 mb-8 leading-relaxed">
                    Aún no hay servidores configurados para <span class="text-calico-orange-400 font-semibold">{game.name}</span>.
                    <span id="create-first-text" style="display: none;"> ¡Puedes crear el primero!</span>
                  </p>
                  <div id="create-server-btn-empty" style="display: none;">
                    <button id="show-create-form-empty" class="group relative overflow-hidden bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 hover:from-calico-orange-600 hover:to-calico-orange-700 text-calico-white px-8 py-4 rounded-xl font-semibold transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-calico-orange-500/25 border border-calico-orange-400/30">
                      <!-- Shimmer effect -->
                      <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full transition-transform duration-700 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12"></div>
                      <span class="relative z-10">Crear Primer Servidor</span>
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <!-- Botón para crear servidor personalizado -->
          <div id="create-server-btn-list" class="text-center" style="display: none;">
            <button id="show-create-form" class="btn-accent px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-105">
              + Crear Servidor Personalizado
            </button>
          </div>
        </div>
      </section>
      
      <!-- Sección de posts del juego -->
      <section class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <!-- Formulario para crear post -->
          <div class="mb-12" id="post-form-container">
            <div class="glass-dark rounded-2xl p-8">
              <h2 class="text-2xl font-bold text-calico-white mb-6 font-game">
                Comparte tu experiencia en {game.name}
              </h2>
              <PostForm 
                client:load
                gameId={game.id}
                placeholder={`¿Qué está pasando en ${game.name}?`}
                showNameField={false}
              />
            </div>
          </div>
          
          <!-- Lista de posts -->
          <div class="space-y-8">
            <div class="flex items-center justify-between">
              <h2 class="text-3xl font-bold text-calico-white font-game">
                Últimas publicaciones
              </h2>
              <div class="text-calico-orange-500 font-medium">
                {gamePosts.length} {gamePosts.length === 1 ? 'post' : 'posts'}
              </div>
            </div>
            
            <PostsList 
              client:load
              initialPosts={gamePosts}
              gameId={game.id}
              currentUserId={currentUser?.id}
              emptyMessage={`No hay publicaciones en ${game.name} aún. Comparte tu experiencia y sé el primero.`}
            />
          </div>
        </div>
      </section>
    </main>

    <!-- Formulario de creación de servidor -->
    <div id="create-server-modal" style="display: none;">
      <CreateServerForm 
        gameId={game.id}
        client:load
      />
    </div>

    <!-- Formulario de edición de servidor -->
    <div id="edit-server-modal" style="display: none;">
      <div id="edit-server-form-container">
        <!-- El formulario se cargará dinámicamente aquí -->
      </div>
    </div>
  </ThemeProvider>
</Layout>

<script>
  // Función para verificar autenticación del cliente
  async function checkClientAuth() {
    try {
      const { createClient } = await import('@supabase/supabase-js');
      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );
      
      const { data: { user } } = await supabase.auth.getUser();
      return user ? { user } : null;
    } catch (error) {
      return null;
    }
  }

  // Función para cargar posts desde localStorage
  function loadLocalStoragePosts() {
    const gameName = document.querySelector('h1')?.textContent?.trim() || 'general';
    const storageKey = `posts_${gameName}`;
    const posts = JSON.parse(localStorage.getItem(storageKey) || '[]');
    
    return posts.sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
  }

  // Función para crear elemento de post
  function createPostElement(post: any) {
    const timeAgo = formatTimeAgo(post.timestamp);
    const authorInitial = post.author.charAt(0).toUpperCase();
    
    return `
      <div class="bg-white/10 backdrop-blur-md rounded-xl p-6 shadow-lg post-card transform transition-all duration-300 hover:scale-[1.02]" data-post-id="${post.id}">
        <div class="flex items-center mb-4">
          <div class="w-10 h-10 bg-gradient-to-br from-calico-orange-400 to-calico-gray-500 rounded-full flex items-center justify-center text-calico-white font-bold text-sm">
            ${authorInitial}
          </div>
          <div class="ml-3 flex-1">
            <div class="flex items-center gap-2">
              <h3 class="font-semibold text-calico-white">${post.author}</h3>
            </div>
            <div class="flex items-center gap-2 text-sm text-calico-gray-400">
              <span>${timeAgo}</span>
            </div>
          </div>
        </div>
        <div class="mb-4">
          <p class="text-calico-gray-200 leading-relaxed whitespace-pre-wrap">${post.content}</p>
        </div>
        <div class="flex items-center justify-between pt-4 border-t border-calico-stripe-light/10">
          <div class="flex items-center space-x-6">
            <button class="flex items-center space-x-2 text-calico-gray-400 hover:text-calico-red-400 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
              <span>${post.likes || 0}</span>
            </button>
            <button class="flex items-center space-x-2 text-calico-gray-400 hover:text-calico-blue-400 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
              <span>${post.comments || 0}</span>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  // Función para formatear tiempo
  function formatTimeAgo(timestamp: any) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) {
      return 'Hace unos minutos';
    } else if (diffInHours < 24) {
      return `Hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      if (diffInDays < 7) {
        return `Hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;
      } else {
        return date.toLocaleDateString('es-ES');
      }
    }
  }

  // Función para cargar el formulario de edición de servidor
  async function loadEditServerForm(serverId: string) {
    try {
      const response = await fetch(`/api/servers/${serverId}`);
      if (!response.ok) {
        throw new Error('Error al cargar el servidor');
      }
      
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || 'Error al cargar el servidor');
      }
      
      const server = result.data;
      const editServerModal = document.getElementById('edit-server-modal');
      const editServerFormContainer = document.getElementById('edit-server-form-container');
      
      if (editServerFormContainer && editServerModal) {
        // Crear el formulario de edición dinámicamente
        editServerFormContainer.innerHTML = `
          <div class="edit-server-form-wrapper">
            <!-- El componente React se montará aquí -->
          </div>
        `;
        
        // Importar y montar el componente React
        const { default: EditServerForm } = await import('./EditServerForm.tsx');
        const { createRoot } = await import('react-dom/client');
        const React = await import('react');
        
        const wrapper = editServerFormContainer.querySelector('.edit-server-form-wrapper');
        if (wrapper) {
          const root = createRoot(wrapper);
          root.render(React.createElement(EditServerForm, {
            server: server,
            onServerUpdated: () => {
              window.postMessage({ type: 'SERVER_UPDATED' }, '*');
            },
            onCancel: () => {
              window.postMessage({ type: 'CLOSE_EDIT_SERVER_FORM' }, '*');
            }
          }));
        }
        
        editServerModal.style.display = 'block';
      }
    } catch (error) {
      console.error('Error al cargar el formulario de edición:', error);
      alert('Error al cargar el formulario de edición del servidor');
    }
  }

  // Función para actualizar la lista de posts
  function updatePostsList() {
    const posts = loadLocalStoragePosts();
    const postsContainer = document.getElementById('posts-container');
    const emptyState = document.getElementById('empty-posts-state');
    const postCount = document.getElementById('post-count');
    
    if (posts.length > 0) {
      if (postsContainer) {
        postsContainer.innerHTML = posts.map((post: any) => createPostElement(post)).join('');
        postsContainer.style.display = 'grid';
      }
      if (emptyState) {
        emptyState.style.display = 'none';
      }
      if (postCount) {
        postCount.textContent = `${posts.length} ${posts.length === 1 ? 'post' : 'posts'}`;
      }
    } else {
      if (postsContainer) {
        postsContainer.style.display = 'none';
      }
      if (emptyState) {
        emptyState.style.display = 'block';
      }
      if (postCount) {
        postCount.textContent = '0 posts';
      }
    }
  }

  // Función para actualizar UI basada en autenticación
  async function updateAuthUI() {
    const session = await checkClientAuth();
    const enableCustomServers = true; // Asumimos que está habilitado por defecto
    const hasServers = document.querySelectorAll('.server-card').length > 0;
    
    const createFirstText = document.getElementById('create-first-text');
    const createServerBtnEmpty = document.getElementById('create-server-btn-empty');
    const createServerBtnList = document.getElementById('create-server-btn-list');
    const postFormContainer = document.getElementById('post-form-container');
    const loginPrompt = document.getElementById('login-prompt');
    
    if (session && session.user && enableCustomServers) {
      // Usuario autenticado: mostrar opciones de crear servidor
      if (createFirstText) {
        createFirstText.style.display = 'inline';
      }
      if (createServerBtnEmpty) {
        createServerBtnEmpty.style.display = 'block';
      }
      if (createServerBtnList) {
        createServerBtnList.style.display = 'block';
      }
    } else {
      // Usuario no autenticado: ocultar opciones de crear servidor
      if (createFirstText) {
        createFirstText.style.display = 'none';
      }
      if (createServerBtnEmpty) {
        createServerBtnEmpty.style.display = 'none';
      }
      if (createServerBtnList) {
        createServerBtnList.style.display = 'none';
      }
    }
    
    // Manejar UI de posts
    if (session && session.user) {
      if (postFormContainer) {
        postFormContainer.style.display = 'block';
      }
      if (loginPrompt) {
        loginPrompt.style.display = 'none';
      }
    } else {
      if (postFormContainer) {
        postFormContainer.style.display = 'none';
      }
      if (loginPrompt) {
        loginPrompt.style.display = 'block';
      }
    }
  }



  // Animaciones y efectos interactivos
    document.addEventListener('DOMContentLoaded', async () => {
      
      // Manejar apertura del formulario de creación
      const showCreateFormBtn = document.getElementById('show-create-form');
      const showCreateFormEmptyBtn = document.getElementById('show-create-form-empty');
      const showCreateFormHeaderBtn = document.getElementById('show-create-form-header');
      const createServerModal = document.getElementById('create-server-modal');
      const editServerModal = document.getElementById('edit-server-modal');
      
      const showCreateForm = () => {
        if (createServerModal) {
          createServerModal.style.display = 'block';
        }
      };
      
      if (showCreateFormBtn) {
        showCreateFormBtn.addEventListener('click', showCreateForm);
      }
      
      if (showCreateFormEmptyBtn) {
        showCreateFormEmptyBtn.addEventListener('click', showCreateForm);
      }
      
      if (showCreateFormHeaderBtn) {
        showCreateFormHeaderBtn.addEventListener('click', showCreateForm);
      }
      
      // Manejar cierre del formulario
      window.addEventListener('message', (event) => {
        if (event.data.type === 'CLOSE_CREATE_SERVER_FORM') {
          if (createServerModal) {
            createServerModal.style.display = 'none';
          }
        }
        
        if (event.data.type === 'SERVER_CREATED') {
          // Recargar la página para mostrar el nuevo servidor
          window.location.reload();
        }
        
        if (event.data.type === 'OPEN_EDIT_SERVER_MODAL') {
          const serverId = event.data.serverId;
          if (serverId && editServerModal) {
            // Cargar el servidor y mostrar el modal de edición
            loadEditServerForm(serverId);
          }
        }
        
        if (event.data.type === 'CLOSE_EDIT_SERVER_FORM') {
          if (editServerModal) {
            editServerModal.style.display = 'none';
          }
        }
        
        if (event.data.type === 'SERVER_UPDATED') {
          // Recargar la página para mostrar los cambios
          window.location.reload();
        }
      });
    
    // Verificar autenticación al cargar la página
    await updateAuthUI();
    
    // Cargar posts desde localStorage
    updatePostsList();
    
    // Escuchar cambios en el storage (para cuando el usuario se loguee/desloguee)
    window.addEventListener('storage', () => updateAuthUI());
    
    // Escuchar eventos de nuevos posts
    window.addEventListener('postAdded', () => {
      updatePostsList();
    });
    
    // Escuchar cambios en localStorage para posts
    window.addEventListener('storage', (e) => {
      if (e.key && e.key.startsWith('posts_')) {
        updatePostsList();
      }
    });
    
    // Efecto parallax en el header
    const header = document.querySelector('header');
    const handleScroll = () => {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.3;
      if (header) {
        header.style.transform = `translateY(${rate}px)`;
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    
    // Animación de entrada para las tarjetas de servidores
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            (entry.target as HTMLElement).style.opacity = '1';
            (entry.target as HTMLElement).style.transform = 'translateY(0)';
          }, index * 100);
        }
      });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.transform').forEach((el) => {
      (el as HTMLElement).style.opacity = '0';
      (el as HTMLElement).style.transform = 'translateY(30px)';
      (el as HTMLElement).style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });
    
    // Efecto hover mejorado para las tarjetas
    document.querySelectorAll('.glass, .glass-dark').forEach((card) => {
      card.addEventListener('mouseenter', () => {
        (card as HTMLElement).style.transform = 'translateY(-5px) scale(1.02)';
      });
      
      card.addEventListener('mouseleave', () => {
        (card as HTMLElement).style.transform = 'translateY(0) scale(1)';
      });
    });

    // Scroll a la publicación si existe ?post=<id> en la URL
    const params = new URLSearchParams(window.location.search);
    const targetId = params.get('post');
    if (targetId) {
      const target = document.querySelector(`[data-post-id="${targetId}"]`);
      if (target) {
        (target as HTMLElement).scrollIntoView({ behavior: 'smooth', block: 'center' });
        (target as HTMLElement).classList.add('ring-2','ring-calico-orange-500');
        setTimeout(() => {
          (target as HTMLElement).classList.remove('ring-2','ring-calico-orange-500');
        }, 2000);
      }
    }
  });
</script>