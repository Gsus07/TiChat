---
// src/components/ServerCard.astro
import { getServerStats, createServerSlug } from '../utils/games';
import { supabase } from '../utils/supabaseClient';

interface Props {
  server: {
    id: string;
    name: string;
    description: string;
    image_url: string;
    ip_address: string;
    port: number;
    version: string;
    game_id: string;
    is_active: boolean;
    created_by: string;
  };
  currentUserId?: string;
}

const { server, currentUserId } = Astro.props;

// Verificar que el servidor existe
if (!server || !server.id) {
  throw new Error('ServerCard: server prop is required and must have an id');
}

// Obtener estadísticas del servidor
const stats = await getServerStats(server.id);

// Verificar si el usuario actual es el creador del servidor
const isOwner = currentUserId === server.created_by;

// Simular ping (en una implementación real, esto vendría de un servicio de monitoreo)
const ping = Math.floor(Math.random() * 50) + 10;
---

<a href={`/minecraft/${createServerSlug(server.name)}`} class="server-card block group relative cursor-pointer" data-server-id={server.id}>
  <!-- Glow effect background -->
  <div class="absolute -inset-1 bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl blur opacity-0 group-hover:opacity-75 transition duration-500"></div>
  
  <!-- Main card -->
  <div class="relative bg-gradient-to-br from-slate-800/95 to-slate-900/95 backdrop-blur-xl rounded-2xl overflow-hidden shadow-2xl transition-all duration-500 hover:scale-[1.02] hover:shadow-green-500/25 border border-white/10 group-hover:border-green-500/50">
    <!-- Status indicator -->
    <div class={`absolute top-4 left-4 z-10 flex items-center backdrop-blur-sm rounded-full px-3 py-1 border ${
      server.is_active 
        ? 'bg-green-500/20 border-green-500/30' 
        : 'bg-red-500/20 border-red-500/30'
    }`}>
      <div class={`w-2 h-2 rounded-full mr-2 ${
        server.is_active 
          ? 'bg-green-400 animate-pulse' 
          : 'bg-red-400'
      }`}></div>
      <span class={`text-xs font-medium ${
        server.is_active 
          ? 'text-green-300' 
          : 'text-red-300'
      }`}>
        {server.is_active ? 'En línea' : 'Fuera de línea'}
      </span>
    </div>
    
    <!-- Image container with overlay effects -->
    <div class="relative h-48 overflow-hidden">
      <img 
        src={server.image_url} 
        alt={server.name}
        class="w-full h-full object-cover transition-all duration-700 group-hover:scale-110 group-hover:brightness-110"
      />
      <!-- Gradient overlay -->
      <div class="absolute inset-0 bg-gradient-to-t from-slate-900/90 via-transparent to-transparent opacity-70 group-hover:opacity-50 transition-opacity duration-500"></div>
      
      <!-- Server type badge -->
      <div class="absolute bottom-4 right-4 bg-white/10 backdrop-blur-sm rounded-lg px-3 py-1 border border-white/20">
        <span class="text-white text-sm font-medium">{server.version}</span>
      </div>
      
      <!-- Shimmer effect -->
      <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full transition-transform duration-1000 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12"></div>
    </div>
    
    <!-- Content section -->
    <div class="p-6 relative">
      <!-- Server name -->
      <h3 class="text-2xl font-bold mb-3 text-transparent bg-clip-text bg-gradient-to-r from-white to-gray-300 group-hover:from-green-300 group-hover:to-emerald-300 transition-all duration-500">
        {server.name}
      </h3>
      
      <!-- Description -->
      <p class="text-gray-400 group-hover:text-gray-300 transition-colors duration-300 leading-relaxed mb-4">
        {server.description}
      </p>
      
      <!-- Server details -->
      <div class="space-y-3 mb-4">
        <!-- IP Address -->
        <div class="flex items-center bg-white/5 rounded-lg p-3 border border-white/10 group-hover:border-green-500/30 transition-colors duration-300">
          <div class="w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
            </svg>
          </div>
          <div>
            <div class="text-xs text-gray-500 uppercase tracking-wide">Dirección IP</div>
            <div class="text-green-300 font-mono text-sm">{server.ip_address}:{server.port}</div>
          </div>
        </div>
        
        <!-- Players count -->
        <div class="flex items-center bg-white/5 rounded-lg p-3 border border-white/10">
          <div class="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-2.239"></path>
            </svg>
          </div>
          <div>
            <div class="text-xs text-gray-500 uppercase tracking-wide">Actividad</div>
            <div class="text-blue-300 text-sm font-medium">{stats?.data?.total_posts || 0} posts</div>
          </div>
        </div>
        
        <!-- Last activity -->
        {stats?.data?.last_updated && (
          <div class="flex items-center bg-white/5 rounded-lg p-3 border border-white/10">
            <div class="w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center mr-3">
              <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div>
              <div class="text-xs text-gray-500 uppercase tracking-wide">Última actividad</div>
              <div class="text-purple-300 text-sm font-medium">
                {new Date(stats.data.last_updated).toLocaleDateString('es-ES')}
              </div>
            </div>
          </div>
        )}
      </div>
      
      <!-- Action buttons -->
      <div class="flex items-center justify-between mt-6">
        <button 
          onclick={`event.stopPropagation(); copyServerIP('${server.ip_address}:${server.port}')`}
          class="flex items-center text-green-400 group-hover:text-green-300 transition-colors duration-300 hover:bg-green-500/10 px-3 py-2 rounded-lg z-10 relative"
        >
          <span class="text-sm font-medium">Copiar IP</span>
          <svg class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
        </button>
        
        <!-- Ping indicator -->
        <div class="flex items-center text-xs text-gray-500">
          <div class={`w-2 h-2 rounded-full mr-1 ${
            server.is_active ? 'bg-green-400 animate-pulse' : 'bg-red-400'
          }`}></div>
          <span>{server.is_active ? `${ping}ms` : 'Offline'}</span>
        </div>
      </div>
      
      <!-- Botones de administración (solo visible para el propietario) -->
      {isOwner && (
        <div class="admin-buttons mt-4 flex gap-2 relative z-10">
          <button 
            onclick={`event.preventDefault(); event.stopPropagation(); editServer('${server.id}')`} 
            class="edit-btn flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm relative z-10"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
            Editar
          </button>
          <button 
            onclick={`event.preventDefault(); event.stopPropagation(); deleteServer('${server.id}')`} 
            class="delete-btn flex items-center gap-2 px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors text-sm relative z-10"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
            Eliminar
          </button>
        </div>
      )}
      
      <!-- Decorative bottom border -->
      <div class="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-emerald-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left"></div>
    </div>
  </div>
</a>

<script>
  // Declare global window interface
  declare global {
    interface Window {
      copyServerIP: (ip: string) => void;
      editServer: (serverId: string) => void;
      deleteServer: (serverId: string) => void;
    }
  }

  // Función para copiar IP del servidor al portapapeles
  function copyServerIP(ip: string) {
    navigator.clipboard.writeText(ip).then(() => {
      // Mostrar notificación de éxito
      const notification = document.createElement('div');
      notification.textContent = `IP copiada: ${ip}`;
      notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 2000);
    }).catch(err => {
      console.error('Error al copiar IP:', err);
    });
  }
  
  // Función para editar servidor
  function editServer(serverId: string) {
    // Aquí se abriría un modal de edición
    console.log('Editar servidor:', serverId);
    // TODO: Implementar modal de edición
  }
  
  // Función para eliminar servidor
  function deleteServer(serverId: string) {
    if (confirm('¿Estás seguro de que quieres eliminar este servidor?')) {
      // Aquí se haría la llamada a la API para eliminar
      console.log('Eliminar servidor:', serverId);
      // TODO: Implementar eliminación
    }
  }
  
  // Hacer las funciones globales
  window.copyServerIP = copyServerIP;
  window.editServer = editServer;
  window.deleteServer = deleteServer;

  // Manejar navegación de la tarjeta del servidor
  document.addEventListener('DOMContentLoaded', () => {
    const serverCards = document.querySelectorAll('.server-card');
    
    serverCards.forEach(card => {
      card.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        
        // No navegar si se hizo clic en un botón o sus elementos hijos
        if (target.closest('button') || target.closest('.admin-buttons')) {
          return;
        }
        
        // Obtener la URL del enlace padre
        const link = card as HTMLAnchorElement;
        if (link.href) {
          window.location.href = link.href;
        }
      });
    });
  });
</script>