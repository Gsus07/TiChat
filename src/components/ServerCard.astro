---
// src/components/ServerCard.astro
import { getServerStats, createServerSlug } from '../utils/games';
import { supabase } from '../utils/supabaseClient';

interface Props {
  server: {
    id: string;
    name: string;
    description: string;
    image_url: string;
    ip_address: string;
    port: number;
    version: string;
    game_id: string;
    is_active: boolean;
    created_by: string;
  };
  currentUserId?: string;
}

const { server, currentUserId } = Astro.props;

// Verificar que el servidor existe
if (!server || !server.id) {
  throw new Error('ServerCard: server prop is required and must have an id');
}

// Obtener estadísticas del servidor
const stats = await getServerStats(server.id);

// Verificar si el usuario actual es el creador del servidor
const isOwner = currentUserId === server.created_by;

// Simular ping (en una implementación real, esto vendría de un servicio de monitoreo)
const ping = Math.floor(Math.random() * 50) + 10;
---

<a href={`/minecraft/${createServerSlug(server.name)}`} class="server-card block group relative cursor-pointer" data-server-id={server.id}>
  <!-- Decorative cat paw prints around the card -->
  <div class="absolute -top-3 -left-3 w-5 h-5 text-calico-orange-400/30 opacity-0 group-hover:opacity-100 transition-all duration-500 animate-pulse">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  <div class="absolute -top-3 -right-3 w-5 h-5 text-calico-gray-400/30 opacity-0 group-hover:opacity-100 transition-all duration-500 animate-bounce">
    <svg fill="currentColor" viewBox="0 0 24 24">
      <ellipse cx="8" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="16" cy="6" rx="2" ry="3" fill="currentColor"/>
      <ellipse cx="6" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="18" cy="12" rx="1.5" ry="2" fill="currentColor"/>
      <ellipse cx="12" cy="16" rx="4" ry="5" fill="currentColor"/>
    </svg>
  </div>
  
  <!-- Glow effect background -->
  <div class="absolute -inset-1 bg-gradient-to-r from-calico-orange-600 to-calico-orange-500 rounded-2xl blur opacity-0 group-hover:opacity-75 transition duration-500"></div>
  
  <!-- Main card -->
  <div class="relative bg-white/90 backdrop-blur-xl rounded-2xl overflow-hidden shadow-2xl transition-all duration-500 hover:scale-[1.02] hover:shadow-calico-orange-500/25 border border-calico-gray-200 group-hover:border-calico-orange-500/50">
    <!-- Status indicator -->
    <div class={`absolute top-4 left-4 z-10 flex items-center backdrop-blur-sm rounded-full px-3 py-1 border ${
      server.is_active 
        ? 'bg-green-500/20 border-green-500/30' 
        : 'bg-red-500/20 border-red-500/30'
    }`}>
      <div class={`w-2 h-2 rounded-full mr-2 ${
        server.is_active 
          ? 'bg-green-400 animate-pulse' 
          : 'bg-red-400'
      }`}></div>
      <span class={`text-xs font-medium ${
        server.is_active 
          ? 'text-green-300' 
          : 'text-red-300'
      }`}>
        {server.is_active ? 'En línea' : 'Fuera de línea'}
      </span>
    </div>
    
    <!-- Image container with overlay effects -->
    <div class="relative h-48 overflow-hidden">
      <img 
        src={server.image_url} 
        alt={server.name}
        class="w-full h-full object-cover transition-all duration-700 group-hover:scale-110 group-hover:brightness-110"
      />
      <!-- Gradient overlay -->
      <div class="absolute inset-0 bg-gradient-to-t from-slate-900/90 via-transparent to-transparent opacity-70 group-hover:opacity-50 transition-opacity duration-500"></div>
      
      <!-- Server type badge -->
      <div class="absolute bottom-4 right-4 bg-calico-white/10 backdrop-blur-sm rounded-lg px-3 py-1 border border-calico-stripe-light/30">
        <span class="text-calico-white text-sm font-medium">{server.version}</span>
      </div>
      
      <!-- Shimmer effect -->
      <div class="absolute inset-0 -translate-x-full group-hover:translate-x-full transition-transform duration-1000 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12"></div>
    </div>
    
    <!-- Content section -->
    <div class="p-6 relative flex-grow flex flex-col justify-between bg-white/90">
      <div class="flex-grow">
        <!-- Server name with gradient -->
        <h3 class="text-xl font-bold mb-3 text-gray-800 group-hover:text-calico-orange-600 transition-all duration-500 line-clamp-2">
          {server.name}
        </h3>
        
        <!-- Description -->
        <p class="text-gray-600 group-hover:text-gray-700 transition-colors duration-300 mb-4 text-sm leading-relaxed line-clamp-2">
          {server.description || 'Servidor de Minecraft'}
        </p>
        
        <!-- Server info grid -->
        <div class="grid grid-cols-2 gap-3 mb-4">
          <!-- IP Address -->
          <div class="bg-gray-50 rounded-lg p-3 border border-gray-200 group-hover:border-calico-orange-200 transition-colors duration-300">
            <div class="text-gray-500 text-xs mb-1 font-medium">IP</div>
            <div class="text-gray-800 text-sm font-mono truncate">{server.ip_address}:{server.port}</div>
          </div>
          
          <!-- Players -->
          <div class="bg-gray-50 rounded-lg p-3 border border-gray-200 group-hover:border-calico-orange-200 transition-colors duration-300">
            <div class="text-gray-500 text-xs mb-1 font-medium">Jugadores</div>
            <div class="text-gray-800 text-sm font-semibold">{stats?.data?.total_posts || 0} posts</div>
          </div>
        </div>
        
        <!-- Last activity -->
        {stats?.data?.last_updated && (
          <div class="text-gray-500 text-xs mb-4">
            Última actividad: {new Date(stats.data.last_updated).toLocaleDateString('es-ES')}
          </div>
        )}
      </div>
      
      <!-- Action buttons -->
      <div class="flex items-center justify-between pt-4 border-t border-gray-200">
        <button 
          data-action="copy-ip"
          data-ip={`${server.ip_address}:${server.port}`}
          class="group/copy flex items-center text-calico-orange-600 hover:text-calico-orange-700 transition-all duration-300 hover:bg-calico-orange-50 px-3 py-2 rounded-lg z-10 relative border border-calico-orange-200 hover:border-calico-orange-300"
        >
          <span class="text-sm font-medium">Copiar IP</span>
          <svg class="w-4 h-4 ml-2 transform group-hover/copy:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
        </button>
        
        <!-- Ping indicator -->
        <div class="flex items-center text-xs text-gray-500">
          <div class={`w-2 h-2 rounded-full mr-1 ${
            server.is_active ? 'bg-green-400 animate-pulse' : 'bg-red-400'
          }`}></div>
          <span>{server.is_active ? `${ping}ms` : 'Offline'}</span>
        </div>
        
        <!-- Admin buttons for server owner -->
        {isOwner && (
          <div class="flex space-x-2">
            <button 
              data-action="edit-server"
              data-server-id={server.id}
              class="text-blue-600 hover:text-blue-700 transition-colors duration-300 hover:bg-blue-50 p-2 rounded-lg z-10 relative border border-blue-200 hover:border-blue-300"
              title="Editar servidor"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
            </button>
            <button 
              data-action="delete-server"
              data-server-id={server.id}
              class="text-red-600 hover:text-red-700 transition-colors duration-300 hover:bg-red-50 p-2 rounded-lg z-10 relative border border-red-200 hover:border-red-300"
              title="Eliminar servidor"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        )}
      </div>
      
      <!-- Decorative bottom border -->
      <div class="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-calico-orange-500 to-calico-orange-600 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left"></div>
    </div>
  </div>
</a>

<script>
  // Declare global window interface
  declare global {
    interface Window {
      copyServerIP: (ip: string) => void;
      editServer: (serverId: string) => void;
      deleteServer: (serverId: string) => void;
    }
  }

  // Función para copiar IP del servidor al portapapeles
  function copyServerIP(ip: string) {
    navigator.clipboard.writeText(ip).then(() => {
      // Mostrar notificación de éxito
      const notification = document.createElement('div');
      notification.textContent = `IP copiada: ${ip}`;
      notification.className = 'fixed top-4 right-4 bg-green-600 text-calico-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 2000);
    }).catch(err => {
    });
  }
  
  // Función para editar servidor
  function editServer(serverId: string) {
    // Enviar mensaje al componente para abrir el modal de edición
    window.postMessage({
      type: 'OPEN_EDIT_SERVER_MODAL',
      serverId: serverId
    }, '*');
  }
  
  // Función para eliminar servidor
  async function deleteServer(serverId: string) {
    if (confirm('¿Estás seguro de que quieres eliminar este servidor? Esta acción no se puede deshacer.')) {
      try {
        // Obtener token de autenticación
        const { createClient } = await import('@supabase/supabase-js');
        const supabase = createClient(
          import.meta.env.PUBLIC_SUPABASE_URL,
          import.meta.env.PUBLIC_SUPABASE_ANON_KEY
        );
        
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          alert('Debes iniciar sesión para eliminar servidores');
          return;
        }

        // Realizar petición DELETE al API
        const response = await fetch(`/api/servers/${serverId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          // Mostrar notificación de éxito
          const notification = document.createElement('div');
          notification.textContent = 'Servidor eliminado correctamente';
          notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300';
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
              document.body.removeChild(notification);
            }, 300);
          }, 2000);

          // Recargar la página para reflejar los cambios
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          const errorData = await response.json();
          alert(`Error al eliminar servidor: ${errorData.error || 'Error desconocido'}`);
        }
      } catch (error) {
        console.error('Error al eliminar servidor:', error);
        alert('Error al eliminar servidor. Por favor, inténtalo de nuevo.');
      }
    }
  }
  
  // Hacer las funciones globales
  window.copyServerIP = copyServerIP;
  window.editServer = editServer;
  window.deleteServer = deleteServer;

  // Manejar navegación de la tarjeta del servidor y eventos de botones
  document.addEventListener('DOMContentLoaded', () => {
    const serverCards = document.querySelectorAll('.server-card');
    
    serverCards.forEach(card => {
      // Manejar clics en botones de acción específicamente
      const actionButtons = card.querySelectorAll('button[data-action]');
      actionButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          
          const action = button.getAttribute('data-action');
          
          switch (action) {
            case 'copy-ip':
              const ip = button.getAttribute('data-ip');
              if (ip) copyServerIP(ip);
              break;
              
            case 'edit-server':
              const editServerId = button.getAttribute('data-server-id');
              if (editServerId) editServer(editServerId);
              break;
              
            case 'delete-server':
              const deleteServerId = button.getAttribute('data-server-id');
              if (deleteServerId) deleteServer(deleteServerId);
              break;
          }
        });
      });
      
      // Manejar navegación de la tarjeta solo si no se hace clic en un botón
      card.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const isButton = target.closest('button[data-action]');
        
        if (!isButton) {
          // Si no es un botón, navegar a la página del servidor
          const link = card as HTMLAnchorElement;
          if (link.href) {
            window.location.href = link.href;
          }
        }
      });
    });
  });
</script>